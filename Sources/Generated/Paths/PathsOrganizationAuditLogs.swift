// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Organization {
    public var auditLogs: AuditLogs {
        AuditLogs(path: path + "/audit_logs")
    }

    public struct AuditLogs {
        /// Path: `/organization/audit_logs`
        public let path: String

        /// List user actions and configuration changes within this organization.
        public func get(parameters: GetParameters? = nil) -> Request<OpenAIAPI.ListAuditLogsResponse> {
            Request(path: path, method: "GET", query: parameters?.asQuery, id: "list-audit-logs")
        }

        public struct GetParameters {
            public var effectiveAt: EffectiveAt?
            public var projectIDs: [String]?
            public var eventTypes: [OpenAIAPI.AuditLogEventType]?
            public var actorIDs: [String]?
            public var actorEmails: [String]?
            public var resourceIDs: [String]?
            public var limit: Int?
            public var after: String?
            public var before: String?

            public struct EffectiveAt: Codable {
                /// Return only events whose `effective_at` (Unix seconds) is greater than this value.
                public var gt: Int?
                /// Return only events whose `effective_at` (Unix seconds) is greater than or equal to this value.
                public var gte: Int?
                /// Return only events whose `effective_at` (Unix seconds) is less than this value.
                public var lt: Int?
                /// Return only events whose `effective_at` (Unix seconds) is less than or equal to this value.
                public var lte: Int?

                public init(gt: Int? = nil, gte: Int? = nil, lt: Int? = nil, lte: Int? = nil) {
                    self.gt = gt
                    self.gte = gte
                    self.lt = lt
                    self.lte = lte
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(gt, forKey: "gt")
                    encoder.encode(gte, forKey: "gte")
                    encoder.encode(lt, forKey: "lt")
                    encoder.encode(lte, forKey: "lte")
                    return encoder.items
                }
            }

            public init(effectiveAt: EffectiveAt? = nil, projectIDs: [String]? = nil, eventTypes: [OpenAIAPI.AuditLogEventType]? = nil, actorIDs: [String]? = nil, actorEmails: [String]? = nil, resourceIDs: [String]? = nil, limit: Int? = nil, after: String? = nil, before: String? = nil) {
                self.effectiveAt = effectiveAt
                self.projectIDs = projectIDs
                self.eventTypes = eventTypes
                self.actorIDs = actorIDs
                self.actorEmails = actorEmails
                self.resourceIDs = resourceIDs
                self.limit = limit
                self.after = after
                self.before = before
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(effectiveAt, forKey: "effective_at")
                encoder.encode(projectIDs, forKey: "project_ids[]")
                encoder.encode(eventTypes, forKey: "event_types[]")
                encoder.encode(actorIDs, forKey: "actor_ids[]")
                encoder.encode(actorEmails, forKey: "actor_emails[]")
                encoder.encode(resourceIDs, forKey: "resource_ids[]")
                encoder.encode(limit, forKey: "limit")
                encoder.encode(after, forKey: "after")
                encoder.encode(before, forKey: "before")
                return encoder.items
            }
        }
    }
}

// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.VectorStores.WithVectorStoreID.FileBatches.WithBatchID {
    public var files: Files {
        Files(path: path + "/files")
    }

    public struct Files {
        /// Path: `/vector_stores/{vector_store_id}/file_batches/{batch_id}/files`
        public let path: String

        /// Returns a list of vector store files in a batch.
        public func get(parameters: GetParameters? = nil) -> Request<OpenAIAPI.ListVectorStoreFilesResponse> {
            Request(path: path, method: "GET", query: parameters?.asQuery, id: "listFilesInVectorStoreBatch")
        }

        public struct GetParameters {
            public var limit: Int?
            public var order: Order?
            public var after: String?
            public var before: String?
            public var filter: Filter?

            public enum Order: String, Codable, CaseIterable {
                case asc
                case desc
            }

            public enum Filter: String, Codable, CaseIterable {
                case inProgress = "in_progress"
                case completed
                case failed
                case cancelled
            }

            public init(limit: Int? = nil, order: Order? = nil, after: String? = nil, before: String? = nil, filter: Filter? = nil) {
                self.limit = limit
                self.order = order
                self.after = after
                self.before = before
                self.filter = filter
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(limit, forKey: "limit")
                encoder.encode(order, forKey: "order")
                encoder.encode(after, forKey: "after")
                encoder.encode(before, forKey: "before")
                encoder.encode(filter, forKey: "filter")
                return encoder.items
            }
        }
    }
}

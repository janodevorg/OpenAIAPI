// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Organization.Usage {
    public var images: Images {
        Images(path: path + "/images")
    }

    public struct Images {
        /// Path: `/organization/usage/images`
        public let path: String

        /// Get images usage details for the organization.
        public func get(parameters: GetParameters) -> Request<OpenAIAPI.UsageResponse> {
            Request(path: path, method: "GET", query: parameters.asQuery, id: "usage-images")
        }

        public struct GetParameters {
            public var startTime: Int
            public var endTime: Int?
            public var bucketWidth: BucketWidth?
            public var sources: [Sources]?
            public var sizes: [Sizes]?
            public var projectIDs: [String]?
            public var userIDs: [String]?
            public var apiKeyIDs: [String]?
            public var models: [String]?
            public var groupBy: [GroupBy]?
            public var limit: Int?
            public var page: String?

            public enum BucketWidth: String, Codable, CaseIterable {
                case _1m = "1m"
                case _1h = "1h"
                case _1d = "1d"
            }

            public enum Sources: String, Codable, CaseIterable {
                case imageGeneration = "image.generation"
                case imageEdit = "image.edit"
                case imageVariation = "image.variation"
            }

            public enum Sizes: String, Codable, CaseIterable {
                case _256x256 = "256x256"
                case _512x512 = "512x512"
                case _1024x1024 = "1024x1024"
                case _1792x1792 = "1792x1792"
                case _1024x1792 = "1024x1792"
            }

            public enum GroupBy: String, Codable, CaseIterable {
                case projectID = "project_id"
                case userID = "user_id"
                case apiKeyID = "api_key_id"
                case model
                case size
                case source
            }

            public init(startTime: Int, endTime: Int? = nil, bucketWidth: BucketWidth? = nil, sources: [Sources]? = nil, sizes: [Sizes]? = nil, projectIDs: [String]? = nil, userIDs: [String]? = nil, apiKeyIDs: [String]? = nil, models: [String]? = nil, groupBy: [GroupBy]? = nil, limit: Int? = nil, page: String? = nil) {
                self.startTime = startTime
                self.endTime = endTime
                self.bucketWidth = bucketWidth
                self.sources = sources
                self.sizes = sizes
                self.projectIDs = projectIDs
                self.userIDs = userIDs
                self.apiKeyIDs = apiKeyIDs
                self.models = models
                self.groupBy = groupBy
                self.limit = limit
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(startTime, forKey: "start_time")
                encoder.encode(endTime, forKey: "end_time")
                encoder.encode(bucketWidth, forKey: "bucket_width")
                encoder.encode(sources, forKey: "sources")
                encoder.encode(sizes, forKey: "sizes")
                encoder.encode(projectIDs, forKey: "project_ids")
                encoder.encode(userIDs, forKey: "user_ids")
                encoder.encode(apiKeyIDs, forKey: "api_key_ids")
                encoder.encode(models, forKey: "models")
                encoder.encode(groupBy, forKey: "group_by")
                encoder.encode(limit, forKey: "limit")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

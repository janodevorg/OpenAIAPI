// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Run steps
///
/// Represents a step in execution of a run.
public struct RunStepObject: Codable {
    /// The identifier of the run step, which can be referenced in API endpoints.
    public var id: String
    /// The object type, which is always `thread.run.step`.
    public var object: Object
    /// The Unix timestamp (in seconds) for when the run step was created.
    public var createdAt: Int
    /// The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
    public var assistantID: String
    /// The ID of the [thread](/docs/api-reference/threads) that was run.
    public var threadID: String
    /// The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
    public var runID: String
    /// The type of run step, which can be either `message_creation` or `tool_calls`.
    public var type: `Type`
    /// The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
    public var status: Status
    /// The details of the run step.
    public var stepDetails: StepDetails
    /// The last error associated with this run step. Will be `null` if there are no errors.
    public var lastError: LastError?
    /// The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
    public var expiredAt: Int?
    /// The Unix timestamp (in seconds) for when the run step was cancelled.
    public var cancelledAt: Int?
    /// The Unix timestamp (in seconds) for when the run step failed.
    public var failedAt: Int?
    /// The Unix timestamp (in seconds) for when the run step completed.
    public var completedAt: Int?
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
    public var metadata: [String: AnyJSON]?
    /// Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.
    public var usage: RunStepCompletionUsage?

    /// The object type, which is always `thread.run.step`.
    public enum Object: String, Codable, CaseIterable {
        case threadRunStep = "thread.run.step"
    }

    /// The type of run step, which can be either `message_creation` or `tool_calls`.
    public enum `Type`: String, Codable, CaseIterable {
        case messageCreation = "message_creation"
        case toolCalls = "tool_calls"
    }

    /// The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
    public enum Status: String, Codable, CaseIterable {
        case inProgress = "in_progress"
        case cancelled
        case failed
        case completed
        case expired
    }

    /// The details of the run step.
    public enum StepDetails: Codable {
        case runStepDetailsMessageCreationObject(RunStepDetailsMessageCreationObject)
        case runStepDetailsToolCallsObject(RunStepDetailsToolCallsObject)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(RunStepDetailsMessageCreationObject.self) {
                self = .runStepDetailsMessageCreationObject(value)
            } else if let value = try? container.decode(RunStepDetailsToolCallsObject.self) {
                self = .runStepDetailsToolCallsObject(value)
            } else {
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "Data could not be decoded as any of the expected types (RunStepDetailsMessageCreationObject, RunStepDetailsToolCallsObject)."
                )
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .runStepDetailsMessageCreationObject(let value): try container.encode(value)
            case .runStepDetailsToolCallsObject(let value): try container.encode(value)
            }
        }
    }

    /// The last error associated with this run step. Will be `null` if there are no errors.
    public struct LastError: Codable {
        /// One of `server_error` or `rate_limit_exceeded`.
        public var code: Code
        /// A human-readable description of the error.
        public var message: String

        /// One of `server_error` or `rate_limit_exceeded`.
        public enum Code: String, Codable, CaseIterable {
            case serverError = "server_error"
            case rateLimitExceeded = "rate_limit_exceeded"
        }

        public init(code: Code, message: String) {
            self.code = code
            self.message = message
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.code = try values.decode(Code.self, forKey: "code")
            self.message = try values.decode(String.self, forKey: "message")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(code, forKey: "code")
            try values.encode(message, forKey: "message")
        }
    }

    public init(id: String, object: Object, createdAt: Int, assistantID: String, threadID: String, runID: String, type: `Type`, status: Status, stepDetails: StepDetails, lastError: LastError? = nil, expiredAt: Int? = nil, cancelledAt: Int? = nil, failedAt: Int? = nil, completedAt: Int? = nil, metadata: [String: AnyJSON]? = nil, usage: RunStepCompletionUsage? = nil) {
        self.id = id
        self.object = object
        self.createdAt = createdAt
        self.assistantID = assistantID
        self.threadID = threadID
        self.runID = runID
        self.type = type
        self.status = status
        self.stepDetails = stepDetails
        self.lastError = lastError
        self.expiredAt = expiredAt
        self.cancelledAt = cancelledAt
        self.failedAt = failedAt
        self.completedAt = completedAt
        self.metadata = metadata
        self.usage = usage
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(String.self, forKey: "id")
        self.object = try values.decode(Object.self, forKey: "object")
        self.createdAt = try values.decode(Int.self, forKey: "created_at")
        self.assistantID = try values.decode(String.self, forKey: "assistant_id")
        self.threadID = try values.decode(String.self, forKey: "thread_id")
        self.runID = try values.decode(String.self, forKey: "run_id")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.status = try values.decode(Status.self, forKey: "status")
        self.stepDetails = try values.decode(StepDetails.self, forKey: "step_details")
        self.lastError = try values.decodeIfPresent(LastError.self, forKey: "last_error")
        self.expiredAt = try values.decodeIfPresent(Int.self, forKey: "expired_at")
        self.cancelledAt = try values.decodeIfPresent(Int.self, forKey: "cancelled_at")
        self.failedAt = try values.decodeIfPresent(Int.self, forKey: "failed_at")
        self.completedAt = try values.decodeIfPresent(Int.self, forKey: "completed_at")
        self.metadata = try values.decodeIfPresent([String: AnyJSON].self, forKey: "metadata")
        self.usage = try values.decodeIfPresent(RunStepCompletionUsage.self, forKey: "usage")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(object, forKey: "object")
        try values.encode(createdAt, forKey: "created_at")
        try values.encode(assistantID, forKey: "assistant_id")
        try values.encode(threadID, forKey: "thread_id")
        try values.encode(runID, forKey: "run_id")
        try values.encode(type, forKey: "type")
        try values.encode(status, forKey: "status")
        try values.encode(stepDetails, forKey: "step_details")
        try values.encodeIfPresent(lastError, forKey: "last_error")
        try values.encodeIfPresent(expiredAt, forKey: "expired_at")
        try values.encodeIfPresent(cancelledAt, forKey: "cancelled_at")
        try values.encodeIfPresent(failedAt, forKey: "failed_at")
        try values.encodeIfPresent(completedAt, forKey: "completed_at")
        try values.encodeIfPresent(metadata, forKey: "metadata")
        try values.encodeIfPresent(usage, forKey: "usage")
    }
}

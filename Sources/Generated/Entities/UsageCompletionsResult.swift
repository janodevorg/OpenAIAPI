// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// The aggregated completions usage details of the specific time bucket.
public struct UsageCompletionsResult: Codable {
    public var object: Object
    /// The aggregated number of text input tokens used, including cached tokens. For customers subscribe to scale tier, this includes scale tier tokens.
    public var inputTokens: Int
    /// The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens.
    public var inputCachedTokens: Int?
    /// The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens.
    public var outputTokens: Int
    /// The aggregated number of audio input tokens used, including cached tokens.
    public var inputAudioTokens: Int?
    /// The aggregated number of audio output tokens used.
    public var outputAudioTokens: Int?
    /// The count of requests made to the model.
    public var numModelRequests: Int
    /// When `group_by=project_id`, this field provides the project ID of the grouped usage result.
    public var projectID: String?
    /// When `group_by=user_id`, this field provides the user ID of the grouped usage result.
    public var userID: String?
    /// When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
    public var apiKeyID: String?
    /// When `group_by=model`, this field provides the model name of the grouped usage result.
    public var model: String?
    /// When `group_by=batch`, this field tells whether the grouped usage result is batch or not.
    public var isBatch: Bool?

    public enum Object: String, Codable, CaseIterable {
        case organizationUsageCompletionsResult = "organization.usage.completions.result"
    }

    public init(object: Object, inputTokens: Int, inputCachedTokens: Int? = nil, outputTokens: Int, inputAudioTokens: Int? = nil, outputAudioTokens: Int? = nil, numModelRequests: Int, projectID: String? = nil, userID: String? = nil, apiKeyID: String? = nil, model: String? = nil, isBatch: Bool? = nil) {
        self.object = object
        self.inputTokens = inputTokens
        self.inputCachedTokens = inputCachedTokens
        self.outputTokens = outputTokens
        self.inputAudioTokens = inputAudioTokens
        self.outputAudioTokens = outputAudioTokens
        self.numModelRequests = numModelRequests
        self.projectID = projectID
        self.userID = userID
        self.apiKeyID = apiKeyID
        self.model = model
        self.isBatch = isBatch
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.object = try values.decode(Object.self, forKey: "object")
        self.inputTokens = try values.decode(Int.self, forKey: "input_tokens")
        self.inputCachedTokens = try values.decodeIfPresent(Int.self, forKey: "input_cached_tokens")
        self.outputTokens = try values.decode(Int.self, forKey: "output_tokens")
        self.inputAudioTokens = try values.decodeIfPresent(Int.self, forKey: "input_audio_tokens")
        self.outputAudioTokens = try values.decodeIfPresent(Int.self, forKey: "output_audio_tokens")
        self.numModelRequests = try values.decode(Int.self, forKey: "num_model_requests")
        self.projectID = try values.decodeIfPresent(String.self, forKey: "project_id")
        self.userID = try values.decodeIfPresent(String.self, forKey: "user_id")
        self.apiKeyID = try values.decodeIfPresent(String.self, forKey: "api_key_id")
        self.model = try values.decodeIfPresent(String.self, forKey: "model")
        self.isBatch = try values.decodeIfPresent(Bool.self, forKey: "batch")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(object, forKey: "object")
        try values.encode(inputTokens, forKey: "input_tokens")
        try values.encodeIfPresent(inputCachedTokens, forKey: "input_cached_tokens")
        try values.encode(outputTokens, forKey: "output_tokens")
        try values.encodeIfPresent(inputAudioTokens, forKey: "input_audio_tokens")
        try values.encodeIfPresent(outputAudioTokens, forKey: "output_audio_tokens")
        try values.encode(numModelRequests, forKey: "num_model_requests")
        try values.encodeIfPresent(projectID, forKey: "project_id")
        try values.encodeIfPresent(userID, forKey: "user_id")
        try values.encodeIfPresent(apiKeyID, forKey: "api_key_id")
        try values.encodeIfPresent(model, forKey: "model")
        try values.encodeIfPresent(isBatch, forKey: "batch")
    }
}

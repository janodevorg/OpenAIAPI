// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct InviteListResponse: Codable {
    /// The object type, which is always `list`
    public var object: Object
    public var data: [Invite]
    /// The first `invite_id` in the retrieved `list`
    public var firstID: String?
    /// The last `invite_id` in the retrieved `list`
    public var lastID: String?
    /// The `has_more` property is used for pagination to indicate there are additional results.
    public var hasMore: Bool?

    /// The object type, which is always `list`
    public enum Object: String, Codable, CaseIterable {
        case list
    }

    public init(object: Object, data: [Invite], firstID: String? = nil, lastID: String? = nil, hasMore: Bool? = nil) {
        self.object = object
        self.data = data
        self.firstID = firstID
        self.lastID = lastID
        self.hasMore = hasMore
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.object = try values.decode(Object.self, forKey: "object")
        self.data = try values.decode([Invite].self, forKey: "data")
        self.firstID = try values.decodeIfPresent(String.self, forKey: "first_id")
        self.lastID = try values.decodeIfPresent(String.self, forKey: "last_id")
        self.hasMore = try values.decodeIfPresent(Bool.self, forKey: "has_more")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(object, forKey: "object")
        try values.encode(data, forKey: "data")
        try values.encodeIfPresent(firstID, forKey: "first_id")
        try values.encodeIfPresent(lastID, forKey: "last_id")
        try values.encodeIfPresent(hasMore, forKey: "has_more")
    }
}

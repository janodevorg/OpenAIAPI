// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CreateUploadRequest: Codable {
    /// The name of the file to upload.
    public var filename: String
    /// The intended purpose of the uploaded file.
    /// 
    /// See the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose).
    public var purpose: Purpose
    /// The number of bytes in the file you are uploading.
    public var bytes: Int
    /// The MIME type of the file.
    /// 
    /// This must fall within the supported MIME types for your file purpose. See the supported MIME types for assistants and vision.
    public var mimeType: String

    /// The intended purpose of the uploaded file.
    /// 
    /// See the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose).
    public enum Purpose: String, Codable, CaseIterable {
        case assistants
        case batch
        case fineTune = "fine-tune"
        case vision
    }

    public init(filename: String, purpose: Purpose, bytes: Int, mimeType: String) {
        self.filename = filename
        self.purpose = purpose
        self.bytes = bytes
        self.mimeType = mimeType
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.filename = try values.decode(String.self, forKey: "filename")
        self.purpose = try values.decode(Purpose.self, forKey: "purpose")
        self.bytes = try values.decode(Int.self, forKey: "bytes")
        self.mimeType = try values.decode(String.self, forKey: "mime_type")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(filename, forKey: "filename")
        try values.encode(purpose, forKey: "purpose")
        try values.encode(bytes, forKey: "bytes")
        try values.encode(mimeType, forKey: "mime_type")
    }
}

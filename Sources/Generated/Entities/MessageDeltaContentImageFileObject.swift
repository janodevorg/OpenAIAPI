// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Image file
///
/// References an image [File](/docs/api-reference/files) in the content of a message.
public struct MessageDeltaContentImageFileObject: Codable {
    /// The index of the content part in the message.
    public var index: Int
    /// Always `image_file`.
    public var type: `Type`
    public var imageFile: ImageFile?

    /// Always `image_file`.
    public enum `Type`: String, Codable, CaseIterable {
        case imageFile = "image_file"
    }

    public struct ImageFile: Codable {
        /// The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content.
        public var fileID: String?
        /// Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
        public var detail: Detail?

        /// Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
        public enum Detail: String, Codable, CaseIterable {
            case auto
            case low
            case high
        }

        public init(fileID: String? = nil, detail: Detail? = nil) {
            self.fileID = fileID
            self.detail = detail
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.fileID = try values.decodeIfPresent(String.self, forKey: "file_id")
            self.detail = try values.decodeIfPresent(Detail.self, forKey: "detail")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(fileID, forKey: "file_id")
            try values.encodeIfPresent(detail, forKey: "detail")
        }
    }

    public init(index: Int, type: `Type`, imageFile: ImageFile? = nil) {
        self.index = index
        self.type = type
        self.imageFile = imageFile
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.index = try values.decode(Int.self, forKey: "index")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.imageFile = try values.decodeIfPresent(ImageFile.self, forKey: "image_file")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(index, forKey: "index")
        try values.encode(type, forKey: "type")
        try values.encodeIfPresent(imageFile, forKey: "image_file")
    }
}

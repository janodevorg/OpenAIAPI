// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// The actor who performed the audit logged action.
public struct AuditLogActor: Codable {
    /// The type of actor. Is either `session` or `api_key`.
    public var type: `Type`?
    /// The session in which the audit logged action was performed.
    public var session: AuditLogActorSession?
    /// The API Key used to perform the audit logged action.
    public var apiKey: AuditLogActorAPIKey?

    /// The type of actor. Is either `session` or `api_key`.
    public enum `Type`: String, Codable, CaseIterable {
        case session
        case apiKey = "api_key"
    }

    public init(type: `Type`? = nil, session: AuditLogActorSession? = nil, apiKey: AuditLogActorAPIKey? = nil) {
        self.type = type
        self.session = session
        self.apiKey = apiKey
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.type = try values.decodeIfPresent(`Type`.self, forKey: "type")
        self.session = try values.decodeIfPresent(AuditLogActorSession.self, forKey: "session")
        self.apiKey = try values.decodeIfPresent(AuditLogActorAPIKey.self, forKey: "api_key")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(type, forKey: "type")
        try values.encodeIfPresent(session, forKey: "session")
        try values.encodeIfPresent(apiKey, forKey: "api_key")
    }
}

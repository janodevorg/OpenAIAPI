// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Represents a run step delta i.e. any changed fields on a run step during streaming.
public struct RunStepDeltaObject: Codable {
    /// The identifier of the run step, which can be referenced in API endpoints.
    public var id: String
    /// The object type, which is always `thread.run.step.delta`.
    public var object: Object
    /// The delta containing the fields that have changed on the run step.
    public var delta: Delta

    /// The object type, which is always `thread.run.step.delta`.
    public enum Object: String, Codable, CaseIterable {
        case threadRunStepDelta = "thread.run.step.delta"
    }

    /// The delta containing the fields that have changed on the run step.
    public struct Delta: Codable {
        /// The details of the run step.
        public var stepDetails: StepDetails?

        /// The details of the run step.
        public enum StepDetails: Codable {
            case runStepDeltaStepDetailsMessageCreationObject(RunStepDeltaStepDetailsMessageCreationObject)
            case runStepDeltaStepDetailsToolCallsObject(RunStepDeltaStepDetailsToolCallsObject)

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                if let value = try? container.decode(RunStepDeltaStepDetailsMessageCreationObject.self) {
                    self = .runStepDeltaStepDetailsMessageCreationObject(value)
                } else if let value = try? container.decode(RunStepDeltaStepDetailsToolCallsObject.self) {
                    self = .runStepDeltaStepDetailsToolCallsObject(value)
                } else {
                    throw DecodingError.dataCorruptedError(
                        in: container,
                        debugDescription: "Data could not be decoded as any of the expected types (RunStepDeltaStepDetailsMessageCreationObject, RunStepDeltaStepDetailsToolCallsObject)."
                    )
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .runStepDeltaStepDetailsMessageCreationObject(let value): try container.encode(value)
                case .runStepDeltaStepDetailsToolCallsObject(let value): try container.encode(value)
                }
            }
        }

        public init(stepDetails: StepDetails? = nil) {
            self.stepDetails = stepDetails
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.stepDetails = try values.decodeIfPresent(StepDetails.self, forKey: "step_details")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(stepDetails, forKey: "step_details")
        }
    }

    public init(id: String, object: Object, delta: Delta) {
        self.id = id
        self.object = object
        self.delta = delta
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(String.self, forKey: "id")
        self.object = try values.decode(Object.self, forKey: "object")
        self.delta = try values.decode(Delta.self, forKey: "delta")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(object, forKey: "object")
        try values.encode(delta, forKey: "delta")
    }
}

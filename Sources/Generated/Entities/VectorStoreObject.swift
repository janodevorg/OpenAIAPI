// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Vector store
///
/// A vector store is a collection of processed files can be used by the `file_search` tool.
public struct VectorStoreObject: Codable {
    /// The identifier, which can be referenced in API endpoints.
    public var id: String
    /// The object type, which is always `vector_store`.
    public var object: Object
    /// The Unix timestamp (in seconds) for when the vector store was created.
    public var createdAt: Int
    /// The name of the vector store.
    public var name: String
    /// The total number of bytes used by the files in the vector store.
    public var usageBytes: Int
    public var fileCounts: FileCounts
    /// The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
    public var status: Status
    /// Vector store expiration policy
    ///
    /// The expiration policy for a vector store.
    public var expiresAfter: VectorStoreExpirationAfter?
    /// The Unix timestamp (in seconds) for when the vector store will expire.
    public var expiresAt: Int?
    /// The Unix timestamp (in seconds) for when the vector store was last active.
    public var lastActiveAt: Int?
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
    public var metadata: [String: AnyJSON]?

    /// The object type, which is always `vector_store`.
    public enum Object: String, Codable, CaseIterable {
        case vectorStore = "vector_store"
    }

    public struct FileCounts: Codable {
        /// The number of files that are currently being processed.
        public var inProgress: Int
        /// The number of files that have been successfully processed.
        public var completed: Int
        /// The number of files that have failed to process.
        public var failed: Int
        /// The number of files that were cancelled.
        public var cancelled: Int
        /// The total number of files.
        public var total: Int

        public init(inProgress: Int, completed: Int, failed: Int, cancelled: Int, total: Int) {
            self.inProgress = inProgress
            self.completed = completed
            self.failed = failed
            self.cancelled = cancelled
            self.total = total
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.inProgress = try values.decode(Int.self, forKey: "in_progress")
            self.completed = try values.decode(Int.self, forKey: "completed")
            self.failed = try values.decode(Int.self, forKey: "failed")
            self.cancelled = try values.decode(Int.self, forKey: "cancelled")
            self.total = try values.decode(Int.self, forKey: "total")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(inProgress, forKey: "in_progress")
            try values.encode(completed, forKey: "completed")
            try values.encode(failed, forKey: "failed")
            try values.encode(cancelled, forKey: "cancelled")
            try values.encode(total, forKey: "total")
        }
    }

    /// The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
    public enum Status: String, Codable, CaseIterable {
        case expired
        case inProgress = "in_progress"
        case completed
    }

    public init(id: String, object: Object, createdAt: Int, name: String, usageBytes: Int, fileCounts: FileCounts, status: Status, expiresAfter: VectorStoreExpirationAfter? = nil, expiresAt: Int? = nil, lastActiveAt: Int? = nil, metadata: [String: AnyJSON]? = nil) {
        self.id = id
        self.object = object
        self.createdAt = createdAt
        self.name = name
        self.usageBytes = usageBytes
        self.fileCounts = fileCounts
        self.status = status
        self.expiresAfter = expiresAfter
        self.expiresAt = expiresAt
        self.lastActiveAt = lastActiveAt
        self.metadata = metadata
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(String.self, forKey: "id")
        self.object = try values.decode(Object.self, forKey: "object")
        self.createdAt = try values.decode(Int.self, forKey: "created_at")
        self.name = try values.decode(String.self, forKey: "name")
        self.usageBytes = try values.decode(Int.self, forKey: "usage_bytes")
        self.fileCounts = try values.decode(FileCounts.self, forKey: "file_counts")
        self.status = try values.decode(Status.self, forKey: "status")
        self.expiresAfter = try values.decodeIfPresent(VectorStoreExpirationAfter.self, forKey: "expires_after")
        self.expiresAt = try values.decodeIfPresent(Int.self, forKey: "expires_at")
        self.lastActiveAt = try values.decodeIfPresent(Int.self, forKey: "last_active_at")
        self.metadata = try values.decodeIfPresent([String: AnyJSON].self, forKey: "metadata")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(object, forKey: "object")
        try values.encode(createdAt, forKey: "created_at")
        try values.encode(name, forKey: "name")
        try values.encode(usageBytes, forKey: "usage_bytes")
        try values.encode(fileCounts, forKey: "file_counts")
        try values.encode(status, forKey: "status")
        try values.encodeIfPresent(expiresAfter, forKey: "expires_after")
        try values.encodeIfPresent(expiresAt, forKey: "expires_at")
        try values.encodeIfPresent(lastActiveAt, forKey: "last_active_at")
        try values.encodeIfPresent(metadata, forKey: "metadata")
    }
}

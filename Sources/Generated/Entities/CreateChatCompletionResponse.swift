// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CreateChatCompletionResponse: Codable {
    public var id: String
    public var object: String
    public var created: Int
    public var model: String
    public var choices: [Choice]
    public var usage: Usage?

    public struct Choice: Codable {
        public var index: Int?
        public var message: ChatCompletionResponseMessage?
        public var finishReason: String?

        public init(index: Int? = nil, message: ChatCompletionResponseMessage? = nil, finishReason: String? = nil) {
            self.index = index
            self.message = message
            self.finishReason = finishReason
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.index = try values.decodeIfPresent(Int.self, forKey: "index")
            self.message = try values.decodeIfPresent(ChatCompletionResponseMessage.self, forKey: "message")
            self.finishReason = try values.decodeIfPresent(String.self, forKey: "finish_reason")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(index, forKey: "index")
            try values.encodeIfPresent(message, forKey: "message")
            try values.encodeIfPresent(finishReason, forKey: "finish_reason")
        }
    }

    public struct Usage: Codable {
        public var promptTokens: Int
        public var completionTokens: Int
        public var totalTokens: Int

        public init(promptTokens: Int, completionTokens: Int, totalTokens: Int) {
            self.promptTokens = promptTokens
            self.completionTokens = completionTokens
            self.totalTokens = totalTokens
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.promptTokens = try values.decode(Int.self, forKey: "prompt_tokens")
            self.completionTokens = try values.decode(Int.self, forKey: "completion_tokens")
            self.totalTokens = try values.decode(Int.self, forKey: "total_tokens")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(promptTokens, forKey: "prompt_tokens")
            try values.encode(completionTokens, forKey: "completion_tokens")
            try values.encode(totalTokens, forKey: "total_tokens")
        }
    }

    public init(id: String, object: String, created: Int, model: String, choices: [Choice], usage: Usage? = nil) {
        self.id = id
        self.object = object
        self.created = created
        self.model = model
        self.choices = choices
        self.usage = usage
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(String.self, forKey: "id")
        self.object = try values.decode(String.self, forKey: "object")
        self.created = try values.decode(Int.self, forKey: "created")
        self.model = try values.decode(String.self, forKey: "model")
        self.choices = try values.decode([Choice].self, forKey: "choices")
        self.usage = try values.decodeIfPresent(Usage.self, forKey: "usage")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(object, forKey: "object")
        try values.encode(created, forKey: "created")
        try values.encode(model, forKey: "model")
        try values.encode(choices, forKey: "choices")
        try values.encodeIfPresent(usage, forKey: "usage")
    }
}

// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// The aggregated audio transcriptions usage details of the specific time bucket.
public struct UsageAudioTranscriptionsResult: Codable {
    public var object: Object
    /// The number of seconds processed.
    public var seconds: Int
    /// The count of requests made to the model.
    public var numModelRequests: Int
    /// When `group_by=project_id`, this field provides the project ID of the grouped usage result.
    public var projectID: String?
    /// When `group_by=user_id`, this field provides the user ID of the grouped usage result.
    public var userID: String?
    /// When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
    public var apiKeyID: String?
    /// When `group_by=model`, this field provides the model name of the grouped usage result.
    public var model: String?

    public enum Object: String, Codable, CaseIterable {
        case organizationUsageAudioTranscriptionsResult = "organization.usage.audio_transcriptions.result"
    }

    public init(object: Object, seconds: Int, numModelRequests: Int, projectID: String? = nil, userID: String? = nil, apiKeyID: String? = nil, model: String? = nil) {
        self.object = object
        self.seconds = seconds
        self.numModelRequests = numModelRequests
        self.projectID = projectID
        self.userID = userID
        self.apiKeyID = apiKeyID
        self.model = model
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.object = try values.decode(Object.self, forKey: "object")
        self.seconds = try values.decode(Int.self, forKey: "seconds")
        self.numModelRequests = try values.decode(Int.self, forKey: "num_model_requests")
        self.projectID = try values.decodeIfPresent(String.self, forKey: "project_id")
        self.userID = try values.decodeIfPresent(String.self, forKey: "user_id")
        self.apiKeyID = try values.decodeIfPresent(String.self, forKey: "api_key_id")
        self.model = try values.decodeIfPresent(String.self, forKey: "model")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(object, forKey: "object")
        try values.encode(seconds, forKey: "seconds")
        try values.encode(numModelRequests, forKey: "num_model_requests")
        try values.encodeIfPresent(projectID, forKey: "project_id")
        try values.encodeIfPresent(userID, forKey: "user_id")
        try values.encodeIfPresent(apiKeyID, forKey: "api_key_id")
        try values.encodeIfPresent(model, forKey: "model")
    }
}

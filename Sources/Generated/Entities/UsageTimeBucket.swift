// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct UsageTimeBucket: Codable {
    public var object: Object
    public var startTime: Int
    public var endTime: Int
    public var result: [ResultItem]

    public enum Object: String, Codable, CaseIterable {
        case bucket
    }

    public enum ResultItem: Codable {
        case usageCompletionsResult(UsageCompletionsResult)
        case usageEmbeddingsResult(UsageEmbeddingsResult)
        case usageModerationsResult(UsageModerationsResult)
        case usageImagesResult(UsageImagesResult)
        case usageAudioSpeechesResult(UsageAudioSpeechesResult)
        case usageAudioTranscriptionsResult(UsageAudioTranscriptionsResult)
        case usageVectorStoresResult(UsageVectorStoresResult)
        case usageCodeInterpreterSessionsResult(UsageCodeInterpreterSessionsResult)
        case costsResult(CostsResult)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(UsageCompletionsResult.self) {
                self = .usageCompletionsResult(value)
            } else if let value = try? container.decode(UsageEmbeddingsResult.self) {
                self = .usageEmbeddingsResult(value)
            } else if let value = try? container.decode(UsageModerationsResult.self) {
                self = .usageModerationsResult(value)
            } else if let value = try? container.decode(UsageImagesResult.self) {
                self = .usageImagesResult(value)
            } else if let value = try? container.decode(UsageAudioSpeechesResult.self) {
                self = .usageAudioSpeechesResult(value)
            } else if let value = try? container.decode(UsageAudioTranscriptionsResult.self) {
                self = .usageAudioTranscriptionsResult(value)
            } else if let value = try? container.decode(UsageVectorStoresResult.self) {
                self = .usageVectorStoresResult(value)
            } else if let value = try? container.decode(UsageCodeInterpreterSessionsResult.self) {
                self = .usageCodeInterpreterSessionsResult(value)
            } else if let value = try? container.decode(CostsResult.self) {
                self = .costsResult(value)
            } else {
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "Data could not be decoded as any of the expected types (UsageCompletionsResult, UsageEmbeddingsResult, UsageModerationsResult, UsageImagesResult, UsageAudioSpeechesResult, UsageAudioTranscriptionsResult, UsageVectorStoresResult, UsageCodeInterpreterSessionsResult, CostsResult)."
                )
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .usageCompletionsResult(let value): try container.encode(value)
            case .usageEmbeddingsResult(let value): try container.encode(value)
            case .usageModerationsResult(let value): try container.encode(value)
            case .usageImagesResult(let value): try container.encode(value)
            case .usageAudioSpeechesResult(let value): try container.encode(value)
            case .usageAudioTranscriptionsResult(let value): try container.encode(value)
            case .usageVectorStoresResult(let value): try container.encode(value)
            case .usageCodeInterpreterSessionsResult(let value): try container.encode(value)
            case .costsResult(let value): try container.encode(value)
            }
        }
    }

    public init(object: Object, startTime: Int, endTime: Int, result: [ResultItem]) {
        self.object = object
        self.startTime = startTime
        self.endTime = endTime
        self.result = result
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.object = try values.decode(Object.self, forKey: "object")
        self.startTime = try values.decode(Int.self, forKey: "start_time")
        self.endTime = try values.decode(Int.self, forKey: "end_time")
        self.result = try values.decode([ResultItem].self, forKey: "result")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(object, forKey: "object")
        try values.encode(startTime, forKey: "start_time")
        try values.encode(endTime, forKey: "end_time")
        try values.encode(result, forKey: "result")
    }
}

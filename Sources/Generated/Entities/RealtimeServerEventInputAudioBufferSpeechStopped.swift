// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Returned in `server_vad` mode when the server detects the end of speech in 
/// the audio buffer. The server will also send an `conversation.item.created` 
/// event with the user message item that is created from the audio buffer.
public struct RealtimeServerEventInputAudioBufferSpeechStopped: Codable {
    /// The unique ID of the server event.
    public var eventID: String
    /// The event type, must be `input_audio_buffer.speech_stopped`.
    public var type: `Type`
    /// Milliseconds since the session started when speech stopped. This will 
    /// correspond to the end of audio sent to the model, and thus includes the 
    /// `min_silence_duration_ms` configured in the Session.
    public var audioEndMs: Int
    /// The ID of the user message item that will be created.
    public var itemID: String

    /// The event type, must be `input_audio_buffer.speech_stopped`.
    public enum `Type`: String, Codable, CaseIterable {
        case inputAudioBufferSpeechStopped = "input_audio_buffer.speech_stopped"
    }

    public init(eventID: String, type: `Type`, audioEndMs: Int, itemID: String) {
        self.eventID = eventID
        self.type = type
        self.audioEndMs = audioEndMs
        self.itemID = itemID
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.eventID = try values.decode(String.self, forKey: "event_id")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.audioEndMs = try values.decode(Int.self, forKey: "audio_end_ms")
        self.itemID = try values.decode(String.self, forKey: "item_id")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(eventID, forKey: "event_id")
        try values.encode(type, forKey: "type")
        try values.encode(audioEndMs, forKey: "audio_end_ms")
        try values.encode(itemID, forKey: "item_id")
    }
}

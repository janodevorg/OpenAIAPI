// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Text
///
/// The text content that is part of a message.
public struct MessageContentTextObject: Codable {
    /// Always `text`.
    public var type: `Type`
    public var text: Text

    /// Always `text`.
    public enum `Type`: String, Codable, CaseIterable {
        case text
    }

    public struct Text: Codable {
        /// The data that makes up the text.
        public var value: String
        public var annotations: [Annotation]

        public enum Annotation: Codable {
            case messageContentTextAnnotationsFileCitationObject(MessageContentTextAnnotationsFileCitationObject)
            case messageContentTextAnnotationsFilePathObject(MessageContentTextAnnotationsFilePathObject)

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                if let value = try? container.decode(MessageContentTextAnnotationsFileCitationObject.self) {
                    self = .messageContentTextAnnotationsFileCitationObject(value)
                } else if let value = try? container.decode(MessageContentTextAnnotationsFilePathObject.self) {
                    self = .messageContentTextAnnotationsFilePathObject(value)
                } else {
                    throw DecodingError.dataCorruptedError(
                        in: container,
                        debugDescription: "Data could not be decoded as any of the expected types (MessageContentTextAnnotationsFileCitationObject, MessageContentTextAnnotationsFilePathObject)."
                    )
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .messageContentTextAnnotationsFileCitationObject(let value): try container.encode(value)
                case .messageContentTextAnnotationsFilePathObject(let value): try container.encode(value)
                }
            }
        }

        public init(value: String, annotations: [Annotation]) {
            self.value = value
            self.annotations = annotations
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.value = try values.decode(String.self, forKey: "value")
            self.annotations = try values.decode([Annotation].self, forKey: "annotations")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(value, forKey: "value")
            try values.encode(annotations, forKey: "annotations")
        }
    }

    public init(type: `Type`, text: Text) {
        self.type = type
        self.text = text
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.text = try values.decode(Text.self, forKey: "text")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(type, forKey: "type")
        try values.encode(text, forKey: "text")
    }
}

// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// The API Key used to perform the audit logged action.
public struct AuditLogActorAPIKey: Codable {
    /// The tracking id of the API key.
    public var id: String?
    /// The type of API key. Can be either `user` or `service_account`.
    public var type: `Type`?
    /// The user who performed the audit logged action.
    public var user: AuditLogActorUser?
    /// The service account that performed the audit logged action.
    public var serviceAccount: AuditLogActorServiceAccount?

    /// The type of API key. Can be either `user` or `service_account`.
    public enum `Type`: String, Codable, CaseIterable {
        case user
        case serviceAccount = "service_account"
    }

    public init(id: String? = nil, type: `Type`? = nil, user: AuditLogActorUser? = nil, serviceAccount: AuditLogActorServiceAccount? = nil) {
        self.id = id
        self.type = type
        self.user = user
        self.serviceAccount = serviceAccount
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.type = try values.decodeIfPresent(`Type`.self, forKey: "type")
        self.user = try values.decodeIfPresent(AuditLogActorUser.self, forKey: "user")
        self.serviceAccount = try values.decodeIfPresent(AuditLogActorServiceAccount.self, forKey: "service_account")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(type, forKey: "type")
        try values.encodeIfPresent(user, forKey: "user")
        try values.encodeIfPresent(serviceAccount, forKey: "service_account")
    }
}

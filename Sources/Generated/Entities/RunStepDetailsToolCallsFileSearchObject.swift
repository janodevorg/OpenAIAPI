// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// File search tool call
public struct RunStepDetailsToolCallsFileSearchObject: Codable {
    /// The ID of the tool call object.
    public var id: String
    /// The type of tool call. This is always going to be `file_search` for this type of tool call.
    public var type: `Type`
    /// For now, this is always going to be an empty object.
    public var fileSearch: FileSearch

    /// The type of tool call. This is always going to be `file_search` for this type of tool call.
    public enum `Type`: String, Codable, CaseIterable {
        case fileSearch = "file_search"
    }

    /// For now, this is always going to be an empty object.
    public struct FileSearch: Codable {
        /// File search tool call ranking options
        ///
        /// The ranking options for the file search.
        public var rankingOptions: RunStepDetailsToolCallsFileSearchRankingOptionsObject?
        /// The results of the file search.
        public var results: [RunStepDetailsToolCallsFileSearchResultObject]?

        public init(rankingOptions: RunStepDetailsToolCallsFileSearchRankingOptionsObject? = nil, results: [RunStepDetailsToolCallsFileSearchResultObject]? = nil) {
            self.rankingOptions = rankingOptions
            self.results = results
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.rankingOptions = try values.decodeIfPresent(RunStepDetailsToolCallsFileSearchRankingOptionsObject.self, forKey: "ranking_options")
            self.results = try values.decodeIfPresent([RunStepDetailsToolCallsFileSearchResultObject].self, forKey: "results")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(rankingOptions, forKey: "ranking_options")
            try values.encodeIfPresent(results, forKey: "results")
        }
    }

    public init(id: String, type: `Type`, fileSearch: FileSearch) {
        self.id = id
        self.type = type
        self.fileSearch = fileSearch
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(String.self, forKey: "id")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.fileSearch = try values.decode(FileSearch.self, forKey: "file_search")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(type, forKey: "type")
        try values.encode(fileSearch, forKey: "file_search")
    }
}

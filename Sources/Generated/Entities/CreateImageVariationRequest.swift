// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CreateImageVariationRequest: Codable {
    /// The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
    public var image: String
    /// The number of images to generate. Must be between 1 and 10.
    public var n: Int?
    /// The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
    ///
    /// Example: "1024x1024"
    public var size: Size?
    /// The format in which the generated images are returned. Must be one of `url` or `b64_json`.
    ///
    /// Example: "url"
    public var responseFormat: ResponseFormat?
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
    ///
    /// Example: "user-1234"
    public var user: String?

    /// The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
    ///
    /// Example: "1024x1024"
    public enum Size: String, Codable, CaseIterable {
        case _256x256 = "256x256"
        case _512x512 = "512x512"
        case _1024x1024 = "1024x1024"
    }

    /// The format in which the generated images are returned. Must be one of `url` or `b64_json`.
    ///
    /// Example: "url"
    public enum ResponseFormat: String, Codable, CaseIterable {
        case url
        case b64JSON = "b64_json"
    }

    public init(image: String, n: Int? = nil, size: Size? = nil, responseFormat: ResponseFormat? = nil, user: String? = nil) {
        self.image = image
        self.n = n
        self.size = size
        self.responseFormat = responseFormat
        self.user = user
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.image = try values.decode(String.self, forKey: "image")
        self.n = try values.decodeIfPresent(Int.self, forKey: "n")
        self.size = try values.decodeIfPresent(Size.self, forKey: "size")
        self.responseFormat = try values.decodeIfPresent(ResponseFormat.self, forKey: "response_format")
        self.user = try values.decodeIfPresent(String.self, forKey: "user")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(image, forKey: "image")
        try values.encodeIfPresent(n, forKey: "n")
        try values.encodeIfPresent(size, forKey: "size")
        try values.encodeIfPresent(responseFormat, forKey: "response_format")
        try values.encodeIfPresent(user, forKey: "user")
    }
}

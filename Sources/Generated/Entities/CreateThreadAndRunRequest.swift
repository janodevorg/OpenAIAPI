// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CreateThreadAndRunRequest: Codable {
    /// The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
    public var assistantID: String
    public var thread: CreateThreadRequest?
    /// The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
    ///
    /// Example: "gpt-4o"
    public var model: Model?
    /// Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
    public var instructions: String?
    /// Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
    public var tools: [Tool]?
    /// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
    public var toolResources: ToolResources?
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
    public var metadata: [String: AnyJSON]?
    /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
    public var temperature: Double?
    /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    /// 
    /// We generally recommend altering this or temperature but not both.
    public var topP: Double?
    /// If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
    public var isStream: Bool?
    /// The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
    public var maxPromptTokens: Int?
    /// The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
    public var maxCompletionTokens: Int?
    /// Thread Truncation Controls
    ///
    /// Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.
    public var truncationStrategy: TruncationObject?
    /// Controls which (if any) tool is called by the model.
    /// `none` means the model will not call any tools and instead generates a message.
    /// `auto` is the default value and means the model can pick between generating a message or calling one or more tools.
    /// `required` means the model must call one or more tools before responding to the user.
    /// Specifying a particular tool like `{"type": "file_search"}` or `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
    public var toolChoice: AssistantsAPIToolChoiceOption?
    /// Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
    public var isParallelToolCalls: Bool
    /// Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.
    /// 
    /// Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).
    /// 
    /// Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
    /// 
    /// **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
    public var responseFormat: AssistantsAPIResponseFormatOption?

    /// The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
    ///
    /// Example: "gpt-4o"
    public struct Model: Codable {
        public var string: String?
        public var object: Object?

        public enum Object: String, Codable, CaseIterable {
            case gpt4o = "gpt-4o"
            case gpt4o20241120 = "gpt-4o-2024-11-20"
            case gpt4o20240806 = "gpt-4o-2024-08-06"
            case gpt4o20240513 = "gpt-4o-2024-05-13"
            case gpt4oMini = "gpt-4o-mini"
            case gpt4oMini20240718 = "gpt-4o-mini-2024-07-18"
            case gpt4Turbo = "gpt-4-turbo"
            case gpt4Turbo20240409 = "gpt-4-turbo-2024-04-09"
            case gpt40125Preview = "gpt-4-0125-preview"
            case gpt4TurboPreview = "gpt-4-turbo-preview"
            case gpt41106Preview = "gpt-4-1106-preview"
            case gpt4VisionPreview = "gpt-4-vision-preview"
            case gpt4 = "gpt-4"
            case gpt40314 = "gpt-4-0314"
            case gpt40613 = "gpt-4-0613"
            case gpt432k = "gpt-4-32k"
            case gpt432k0314 = "gpt-4-32k-0314"
            case gpt432k0613 = "gpt-4-32k-0613"
            case gpt35Turbo = "gpt-3.5-turbo"
            case gpt35Turbo16k = "gpt-3.5-turbo-16k"
            case gpt35Turbo0613 = "gpt-3.5-turbo-0613"
            case gpt35Turbo1106 = "gpt-3.5-turbo-1106"
            case gpt35Turbo0125 = "gpt-3.5-turbo-0125"
            case gpt35Turbo16k0613 = "gpt-3.5-turbo-16k-0613"
        }

        public init(string: String? = nil, object: Object? = nil) {
            self.string = string
            self.object = object
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.object = try? container.decode(Object.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = object { try container.encode(value) }
        }
    }

    public enum Tool: Codable {
        case assistantToolsCode(AssistantToolsCode)
        case assistantToolsFileSearch(AssistantToolsFileSearch)
        case assistantToolsFunction(AssistantToolsFunction)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AssistantToolsCode.self) {
                self = .assistantToolsCode(value)
            } else if let value = try? container.decode(AssistantToolsFileSearch.self) {
                self = .assistantToolsFileSearch(value)
            } else if let value = try? container.decode(AssistantToolsFunction.self) {
                self = .assistantToolsFunction(value)
            } else {
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "Data could not be decoded as any of the expected types (AssistantToolsCode, AssistantToolsFileSearch, AssistantToolsFunction)."
                )
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .assistantToolsCode(let value): try container.encode(value)
            case .assistantToolsFileSearch(let value): try container.encode(value)
            case .assistantToolsFunction(let value): try container.encode(value)
            }
        }
    }

    /// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
    public struct ToolResources: Codable {
        public var codeInterpreter: CodeInterpreter?
        public var fileSearch: FileSearch?

        public struct CodeInterpreter: Codable {
            /// A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
            public var fileIDs: [String]?

            public init(fileIDs: [String]? = nil) {
                self.fileIDs = fileIDs
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.fileIDs = try values.decodeIfPresent([String].self, forKey: "file_ids")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(fileIDs, forKey: "file_ids")
            }
        }

        public struct FileSearch: Codable {
            /// The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
            public var vectorStoreIDs: [String]?

            public init(vectorStoreIDs: [String]? = nil) {
                self.vectorStoreIDs = vectorStoreIDs
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.vectorStoreIDs = try values.decodeIfPresent([String].self, forKey: "vector_store_ids")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(vectorStoreIDs, forKey: "vector_store_ids")
            }
        }

        public init(codeInterpreter: CodeInterpreter? = nil, fileSearch: FileSearch? = nil) {
            self.codeInterpreter = codeInterpreter
            self.fileSearch = fileSearch
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.codeInterpreter = try values.decodeIfPresent(CodeInterpreter.self, forKey: "code_interpreter")
            self.fileSearch = try values.decodeIfPresent(FileSearch.self, forKey: "file_search")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(codeInterpreter, forKey: "code_interpreter")
            try values.encodeIfPresent(fileSearch, forKey: "file_search")
        }
    }

    public init(assistantID: String, thread: CreateThreadRequest? = nil, model: Model? = nil, instructions: String? = nil, tools: [Tool]? = nil, toolResources: ToolResources? = nil, metadata: [String: AnyJSON]? = nil, temperature: Double? = nil, topP: Double? = nil, isStream: Bool? = nil, maxPromptTokens: Int? = nil, maxCompletionTokens: Int? = nil, truncationStrategy: TruncationObject? = nil, toolChoice: AssistantsAPIToolChoiceOption? = nil, isParallelToolCalls: Bool? = nil, responseFormat: AssistantsAPIResponseFormatOption? = nil) {
        self.assistantID = assistantID
        self.thread = thread
        self.model = model
        self.instructions = instructions
        self.tools = tools
        self.toolResources = toolResources
        self.metadata = metadata
        self.temperature = temperature
        self.topP = topP
        self.isStream = isStream
        self.maxPromptTokens = maxPromptTokens
        self.maxCompletionTokens = maxCompletionTokens
        self.truncationStrategy = truncationStrategy
        self.toolChoice = toolChoice
        self.isParallelToolCalls = isParallelToolCalls ?? true
        self.responseFormat = responseFormat
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.assistantID = try values.decode(String.self, forKey: "assistant_id")
        self.thread = try values.decodeIfPresent(CreateThreadRequest.self, forKey: "thread")
        self.model = try values.decodeIfPresent(Model.self, forKey: "model")
        self.instructions = try values.decodeIfPresent(String.self, forKey: "instructions")
        self.tools = try values.decodeIfPresent([Tool].self, forKey: "tools")
        self.toolResources = try values.decodeIfPresent(ToolResources.self, forKey: "tool_resources")
        self.metadata = try values.decodeIfPresent([String: AnyJSON].self, forKey: "metadata")
        self.temperature = try values.decodeIfPresent(Double.self, forKey: "temperature")
        self.topP = try values.decodeIfPresent(Double.self, forKey: "top_p")
        self.isStream = try values.decodeIfPresent(Bool.self, forKey: "stream")
        self.maxPromptTokens = try values.decodeIfPresent(Int.self, forKey: "max_prompt_tokens")
        self.maxCompletionTokens = try values.decodeIfPresent(Int.self, forKey: "max_completion_tokens")
        self.truncationStrategy = try values.decodeIfPresent(TruncationObject.self, forKey: "truncation_strategy")
        self.toolChoice = try values.decodeIfPresent(AssistantsAPIToolChoiceOption.self, forKey: "tool_choice")
        self.isParallelToolCalls = try values.decodeIfPresent(Bool.self, forKey: "parallel_tool_calls") ?? true
        self.responseFormat = try values.decodeIfPresent(AssistantsAPIResponseFormatOption.self, forKey: "response_format")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(assistantID, forKey: "assistant_id")
        try values.encodeIfPresent(thread, forKey: "thread")
        try values.encodeIfPresent(model, forKey: "model")
        try values.encodeIfPresent(instructions, forKey: "instructions")
        try values.encodeIfPresent(tools, forKey: "tools")
        try values.encodeIfPresent(toolResources, forKey: "tool_resources")
        try values.encodeIfPresent(metadata, forKey: "metadata")
        try values.encodeIfPresent(temperature, forKey: "temperature")
        try values.encodeIfPresent(topP, forKey: "top_p")
        try values.encodeIfPresent(isStream, forKey: "stream")
        try values.encodeIfPresent(maxPromptTokens, forKey: "max_prompt_tokens")
        try values.encodeIfPresent(maxCompletionTokens, forKey: "max_completion_tokens")
        try values.encodeIfPresent(truncationStrategy, forKey: "truncation_strategy")
        try values.encodeIfPresent(toolChoice, forKey: "tool_choice")
        try values.encodeIfPresent(isParallelToolCalls, forKey: "parallel_tool_calls")
        try values.encodeIfPresent(responseFormat, forKey: "response_format")
    }
}

// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// A log of a user action or configuration change within this organization.
public struct AuditLog: Codable {
    /// The ID of this log.
    public var id: String
    /// The event type.
    public var type: AuditLogEventType
    /// The Unix timestamp (in seconds) of the event.
    public var effectiveAt: Int
    /// The project that the action was scoped to. Absent for actions not scoped to projects.
    public var project: Project?
    /// The actor who performed the audit logged action.
    public var actor: AuditLogActor
    /// The details for events with this `type`.
    public var apiKeyCreated: APIKeyCreated?
    /// The details for events with this `type`.
    public var apiKeyUpdated: APIKeyUpdated?
    /// The details for events with this `type`.
    public var apiKeyDeleted: APIKeyDeleted?
    /// The details for events with this `type`.
    public var inviteSent: InviteSent?
    /// The details for events with this `type`.
    public var inviteAccepted: InviteAccepted?
    /// The details for events with this `type`.
    public var inviteDeleted: InviteDeleted?
    /// The details for events with this `type`.
    public var loginFailed: LoginFailed?
    /// The details for events with this `type`.
    public var logoutFailed: LogoutFailed?
    /// The details for events with this `type`.
    public var organizationUpdated: OrganizationUpdated?
    /// The details for events with this `type`.
    public var projectCreated: ProjectCreated?
    /// The details for events with this `type`.
    public var projectUpdated: ProjectUpdated?
    /// The details for events with this `type`.
    public var projectArchived: ProjectArchived?
    /// The details for events with this `type`.
    public var rateLimitUpdated: RateLimitUpdated?
    /// The details for events with this `type`.
    public var rateLimitDeleted: RateLimitDeleted?
    /// The details for events with this `type`.
    public var serviceAccountCreated: ServiceAccountCreated?
    /// The details for events with this `type`.
    public var serviceAccountUpdated: ServiceAccountUpdated?
    /// The details for events with this `type`.
    public var serviceAccountDeleted: ServiceAccountDeleted?
    /// The details for events with this `type`.
    public var userAdded: UserAdded?
    /// The details for events with this `type`.
    public var userUpdated: UserUpdated?
    /// The details for events with this `type`.
    public var userDeleted: UserDeleted?

    /// The project that the action was scoped to. Absent for actions not scoped to projects.
    public struct Project: Codable {
        /// The project ID.
        public var id: String?
        /// The project title.
        public var name: String?

        public init(id: String? = nil, name: String? = nil) {
            self.id = id
            self.name = name
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
            self.name = try values.decodeIfPresent(String.self, forKey: "name")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(name, forKey: "name")
        }
    }

    /// The details for events with this `type`.
    public struct APIKeyCreated: Codable {
        /// The tracking ID of the API key.
        public var id: String?
        /// The payload used to create the API key.
        public var data: Data?

        /// The payload used to create the API key.
        public struct Data: Codable {
            /// A list of scopes allowed for the API key, e.g. `["api.model.request"]`
            public var scopes: [String]?

            public init(scopes: [String]? = nil) {
                self.scopes = scopes
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.scopes = try values.decodeIfPresent([String].self, forKey: "scopes")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(scopes, forKey: "scopes")
            }
        }

        public init(id: String? = nil, data: Data? = nil) {
            self.id = id
            self.data = data
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
            self.data = try values.decodeIfPresent(Data.self, forKey: "data")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(data, forKey: "data")
        }
    }

    /// The details for events with this `type`.
    public struct APIKeyUpdated: Codable {
        /// The tracking ID of the API key.
        public var id: String?
        /// The payload used to update the API key.
        public var changesRequested: ChangesRequested?

        /// The payload used to update the API key.
        public struct ChangesRequested: Codable {
            /// A list of scopes allowed for the API key, e.g. `["api.model.request"]`
            public var scopes: [String]?

            public init(scopes: [String]? = nil) {
                self.scopes = scopes
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.scopes = try values.decodeIfPresent([String].self, forKey: "scopes")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(scopes, forKey: "scopes")
            }
        }

        public init(id: String? = nil, changesRequested: ChangesRequested? = nil) {
            self.id = id
            self.changesRequested = changesRequested
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
            self.changesRequested = try values.decodeIfPresent(ChangesRequested.self, forKey: "changes_requested")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(changesRequested, forKey: "changes_requested")
        }
    }

    /// The details for events with this `type`.
    public struct APIKeyDeleted: Codable {
        /// The tracking ID of the API key.
        public var id: String?

        public init(id: String? = nil) {
            self.id = id
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
        }
    }

    /// The details for events with this `type`.
    public struct InviteSent: Codable {
        /// The ID of the invite.
        public var id: String?
        /// The payload used to create the invite.
        public var data: Data?

        /// The payload used to create the invite.
        public struct Data: Codable {
            /// The email invited to the organization.
            public var email: String?
            /// The role the email was invited to be. Is either `owner` or `member`.
            public var role: String?

            public init(email: String? = nil, role: String? = nil) {
                self.email = email
                self.role = role
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.email = try values.decodeIfPresent(String.self, forKey: "email")
                self.role = try values.decodeIfPresent(String.self, forKey: "role")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(email, forKey: "email")
                try values.encodeIfPresent(role, forKey: "role")
            }
        }

        public init(id: String? = nil, data: Data? = nil) {
            self.id = id
            self.data = data
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
            self.data = try values.decodeIfPresent(Data.self, forKey: "data")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(data, forKey: "data")
        }
    }

    /// The details for events with this `type`.
    public struct InviteAccepted: Codable {
        /// The ID of the invite.
        public var id: String?

        public init(id: String? = nil) {
            self.id = id
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
        }
    }

    /// The details for events with this `type`.
    public struct InviteDeleted: Codable {
        /// The ID of the invite.
        public var id: String?

        public init(id: String? = nil) {
            self.id = id
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
        }
    }

    /// The details for events with this `type`.
    public struct LoginFailed: Codable {
        /// The error code of the failure.
        public var errorCode: String?
        /// The error message of the failure.
        public var errorMessage: String?

        public init(errorCode: String? = nil, errorMessage: String? = nil) {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.errorCode = try values.decodeIfPresent(String.self, forKey: "error_code")
            self.errorMessage = try values.decodeIfPresent(String.self, forKey: "error_message")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(errorCode, forKey: "error_code")
            try values.encodeIfPresent(errorMessage, forKey: "error_message")
        }
    }

    /// The details for events with this `type`.
    public struct LogoutFailed: Codable {
        /// The error code of the failure.
        public var errorCode: String?
        /// The error message of the failure.
        public var errorMessage: String?

        public init(errorCode: String? = nil, errorMessage: String? = nil) {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.errorCode = try values.decodeIfPresent(String.self, forKey: "error_code")
            self.errorMessage = try values.decodeIfPresent(String.self, forKey: "error_message")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(errorCode, forKey: "error_code")
            try values.encodeIfPresent(errorMessage, forKey: "error_message")
        }
    }

    /// The details for events with this `type`.
    public struct OrganizationUpdated: Codable {
        /// The organization ID.
        public var id: String?
        /// The payload used to update the organization settings.
        public var changesRequested: ChangesRequested?

        /// The payload used to update the organization settings.
        public struct ChangesRequested: Codable {
            /// The organization title.
            public var title: String?
            /// The organization description.
            public var description: String?
            /// The organization name.
            public var name: String?
            public var settings: Settings?

            public struct Settings: Codable {
                /// Visibility of the threads page which shows messages created with the Assistants API and Playground. One of `ANY_ROLE`, `OWNERS`, or `NONE`.
                public var threadsUiVisibility: String?
                /// Visibility of the usage dashboard which shows activity and costs for your organization. One of `ANY_ROLE` or `OWNERS`.
                public var usageDashboardVisibility: String?

                public init(threadsUiVisibility: String? = nil, usageDashboardVisibility: String? = nil) {
                    self.threadsUiVisibility = threadsUiVisibility
                    self.usageDashboardVisibility = usageDashboardVisibility
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.threadsUiVisibility = try values.decodeIfPresent(String.self, forKey: "threads_ui_visibility")
                    self.usageDashboardVisibility = try values.decodeIfPresent(String.self, forKey: "usage_dashboard_visibility")
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encodeIfPresent(threadsUiVisibility, forKey: "threads_ui_visibility")
                    try values.encodeIfPresent(usageDashboardVisibility, forKey: "usage_dashboard_visibility")
                }
            }

            public init(title: String? = nil, description: String? = nil, name: String? = nil, settings: Settings? = nil) {
                self.title = title
                self.description = description
                self.name = name
                self.settings = settings
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.title = try values.decodeIfPresent(String.self, forKey: "title")
                self.description = try values.decodeIfPresent(String.self, forKey: "description")
                self.name = try values.decodeIfPresent(String.self, forKey: "name")
                self.settings = try values.decodeIfPresent(Settings.self, forKey: "settings")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(title, forKey: "title")
                try values.encodeIfPresent(description, forKey: "description")
                try values.encodeIfPresent(name, forKey: "name")
                try values.encodeIfPresent(settings, forKey: "settings")
            }
        }

        public init(id: String? = nil, changesRequested: ChangesRequested? = nil) {
            self.id = id
            self.changesRequested = changesRequested
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
            self.changesRequested = try values.decodeIfPresent(ChangesRequested.self, forKey: "changes_requested")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(changesRequested, forKey: "changes_requested")
        }
    }

    /// The details for events with this `type`.
    public struct ProjectCreated: Codable {
        /// The project ID.
        public var id: String?
        /// The payload used to create the project.
        public var data: Data?

        /// The payload used to create the project.
        public struct Data: Codable {
            /// The project name.
            public var name: String?
            /// The title of the project as seen on the dashboard.
            public var title: String?

            public init(name: String? = nil, title: String? = nil) {
                self.name = name
                self.title = title
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.name = try values.decodeIfPresent(String.self, forKey: "name")
                self.title = try values.decodeIfPresent(String.self, forKey: "title")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(name, forKey: "name")
                try values.encodeIfPresent(title, forKey: "title")
            }
        }

        public init(id: String? = nil, data: Data? = nil) {
            self.id = id
            self.data = data
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
            self.data = try values.decodeIfPresent(Data.self, forKey: "data")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(data, forKey: "data")
        }
    }

    /// The details for events with this `type`.
    public struct ProjectUpdated: Codable {
        /// The project ID.
        public var id: String?
        /// The payload used to update the project.
        public var changesRequested: ChangesRequested?

        /// The payload used to update the project.
        public struct ChangesRequested: Codable {
            /// The title of the project as seen on the dashboard.
            public var title: String?

            public init(title: String? = nil) {
                self.title = title
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.title = try values.decodeIfPresent(String.self, forKey: "title")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(title, forKey: "title")
            }
        }

        public init(id: String? = nil, changesRequested: ChangesRequested? = nil) {
            self.id = id
            self.changesRequested = changesRequested
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
            self.changesRequested = try values.decodeIfPresent(ChangesRequested.self, forKey: "changes_requested")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(changesRequested, forKey: "changes_requested")
        }
    }

    /// The details for events with this `type`.
    public struct ProjectArchived: Codable {
        /// The project ID.
        public var id: String?

        public init(id: String? = nil) {
            self.id = id
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
        }
    }

    /// The details for events with this `type`.
    public struct RateLimitUpdated: Codable {
        /// The rate limit ID
        public var id: String?
        /// The payload used to update the rate limits.
        public var changesRequested: ChangesRequested?

        /// The payload used to update the rate limits.
        public struct ChangesRequested: Codable {
            /// The maximum requests per minute.
            public var maxRequestsPer1Minute: Int?
            /// The maximum tokens per minute.
            public var maxTokensPer1Minute: Int?
            /// The maximum images per minute. Only relevant for certain models.
            public var maxImagesPer1Minute: Int?
            /// The maximum audio megabytes per minute. Only relevant for certain models.
            public var maxAudioMegabytesPer1Minute: Int?
            /// The maximum requests per day. Only relevant for certain models.
            public var maxRequestsPer1Day: Int?
            /// The maximum batch input tokens per day. Only relevant for certain models.
            public var batch1DayMaxInputTokens: Int?

            public init(maxRequestsPer1Minute: Int? = nil, maxTokensPer1Minute: Int? = nil, maxImagesPer1Minute: Int? = nil, maxAudioMegabytesPer1Minute: Int? = nil, maxRequestsPer1Day: Int? = nil, batch1DayMaxInputTokens: Int? = nil) {
                self.maxRequestsPer1Minute = maxRequestsPer1Minute
                self.maxTokensPer1Minute = maxTokensPer1Minute
                self.maxImagesPer1Minute = maxImagesPer1Minute
                self.maxAudioMegabytesPer1Minute = maxAudioMegabytesPer1Minute
                self.maxRequestsPer1Day = maxRequestsPer1Day
                self.batch1DayMaxInputTokens = batch1DayMaxInputTokens
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.maxRequestsPer1Minute = try values.decodeIfPresent(Int.self, forKey: "max_requests_per_1_minute")
                self.maxTokensPer1Minute = try values.decodeIfPresent(Int.self, forKey: "max_tokens_per_1_minute")
                self.maxImagesPer1Minute = try values.decodeIfPresent(Int.self, forKey: "max_images_per_1_minute")
                self.maxAudioMegabytesPer1Minute = try values.decodeIfPresent(Int.self, forKey: "max_audio_megabytes_per_1_minute")
                self.maxRequestsPer1Day = try values.decodeIfPresent(Int.self, forKey: "max_requests_per_1_day")
                self.batch1DayMaxInputTokens = try values.decodeIfPresent(Int.self, forKey: "batch_1_day_max_input_tokens")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(maxRequestsPer1Minute, forKey: "max_requests_per_1_minute")
                try values.encodeIfPresent(maxTokensPer1Minute, forKey: "max_tokens_per_1_minute")
                try values.encodeIfPresent(maxImagesPer1Minute, forKey: "max_images_per_1_minute")
                try values.encodeIfPresent(maxAudioMegabytesPer1Minute, forKey: "max_audio_megabytes_per_1_minute")
                try values.encodeIfPresent(maxRequestsPer1Day, forKey: "max_requests_per_1_day")
                try values.encodeIfPresent(batch1DayMaxInputTokens, forKey: "batch_1_day_max_input_tokens")
            }
        }

        public init(id: String? = nil, changesRequested: ChangesRequested? = nil) {
            self.id = id
            self.changesRequested = changesRequested
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
            self.changesRequested = try values.decodeIfPresent(ChangesRequested.self, forKey: "changes_requested")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(changesRequested, forKey: "changes_requested")
        }
    }

    /// The details for events with this `type`.
    public struct RateLimitDeleted: Codable {
        /// The rate limit ID
        public var id: String?

        public init(id: String? = nil) {
            self.id = id
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
        }
    }

    /// The details for events with this `type`.
    public struct ServiceAccountCreated: Codable {
        /// The service account ID.
        public var id: String?
        /// The payload used to create the service account.
        public var data: Data?

        /// The payload used to create the service account.
        public struct Data: Codable {
            /// The role of the service account. Is either `owner` or `member`.
            public var role: String?

            public init(role: String? = nil) {
                self.role = role
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.role = try values.decodeIfPresent(String.self, forKey: "role")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(role, forKey: "role")
            }
        }

        public init(id: String? = nil, data: Data? = nil) {
            self.id = id
            self.data = data
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
            self.data = try values.decodeIfPresent(Data.self, forKey: "data")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(data, forKey: "data")
        }
    }

    /// The details for events with this `type`.
    public struct ServiceAccountUpdated: Codable {
        /// The service account ID.
        public var id: String?
        /// The payload used to updated the service account.
        public var changesRequested: ChangesRequested?

        /// The payload used to updated the service account.
        public struct ChangesRequested: Codable {
            /// The role of the service account. Is either `owner` or `member`.
            public var role: String?

            public init(role: String? = nil) {
                self.role = role
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.role = try values.decodeIfPresent(String.self, forKey: "role")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(role, forKey: "role")
            }
        }

        public init(id: String? = nil, changesRequested: ChangesRequested? = nil) {
            self.id = id
            self.changesRequested = changesRequested
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
            self.changesRequested = try values.decodeIfPresent(ChangesRequested.self, forKey: "changes_requested")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(changesRequested, forKey: "changes_requested")
        }
    }

    /// The details for events with this `type`.
    public struct ServiceAccountDeleted: Codable {
        /// The service account ID.
        public var id: String?

        public init(id: String? = nil) {
            self.id = id
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
        }
    }

    /// The details for events with this `type`.
    public struct UserAdded: Codable {
        /// The user ID.
        public var id: String?
        /// The payload used to add the user to the project.
        public var data: Data?

        /// The payload used to add the user to the project.
        public struct Data: Codable {
            /// The role of the user. Is either `owner` or `member`.
            public var role: String?

            public init(role: String? = nil) {
                self.role = role
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.role = try values.decodeIfPresent(String.self, forKey: "role")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(role, forKey: "role")
            }
        }

        public init(id: String? = nil, data: Data? = nil) {
            self.id = id
            self.data = data
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
            self.data = try values.decodeIfPresent(Data.self, forKey: "data")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(data, forKey: "data")
        }
    }

    /// The details for events with this `type`.
    public struct UserUpdated: Codable {
        /// The project ID.
        public var id: String?
        /// The payload used to update the user.
        public var changesRequested: ChangesRequested?

        /// The payload used to update the user.
        public struct ChangesRequested: Codable {
            /// The role of the user. Is either `owner` or `member`.
            public var role: String?

            public init(role: String? = nil) {
                self.role = role
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.role = try values.decodeIfPresent(String.self, forKey: "role")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(role, forKey: "role")
            }
        }

        public init(id: String? = nil, changesRequested: ChangesRequested? = nil) {
            self.id = id
            self.changesRequested = changesRequested
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
            self.changesRequested = try values.decodeIfPresent(ChangesRequested.self, forKey: "changes_requested")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(changesRequested, forKey: "changes_requested")
        }
    }

    /// The details for events with this `type`.
    public struct UserDeleted: Codable {
        /// The user ID.
        public var id: String?

        public init(id: String? = nil) {
            self.id = id
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
        }
    }

    public init(id: String, type: AuditLogEventType, effectiveAt: Int, project: Project? = nil, actor: AuditLogActor, apiKeyCreated: APIKeyCreated? = nil, apiKeyUpdated: APIKeyUpdated? = nil, apiKeyDeleted: APIKeyDeleted? = nil, inviteSent: InviteSent? = nil, inviteAccepted: InviteAccepted? = nil, inviteDeleted: InviteDeleted? = nil, loginFailed: LoginFailed? = nil, logoutFailed: LogoutFailed? = nil, organizationUpdated: OrganizationUpdated? = nil, projectCreated: ProjectCreated? = nil, projectUpdated: ProjectUpdated? = nil, projectArchived: ProjectArchived? = nil, rateLimitUpdated: RateLimitUpdated? = nil, rateLimitDeleted: RateLimitDeleted? = nil, serviceAccountCreated: ServiceAccountCreated? = nil, serviceAccountUpdated: ServiceAccountUpdated? = nil, serviceAccountDeleted: ServiceAccountDeleted? = nil, userAdded: UserAdded? = nil, userUpdated: UserUpdated? = nil, userDeleted: UserDeleted? = nil) {
        self.id = id
        self.type = type
        self.effectiveAt = effectiveAt
        self.project = project
        self.actor = actor
        self.apiKeyCreated = apiKeyCreated
        self.apiKeyUpdated = apiKeyUpdated
        self.apiKeyDeleted = apiKeyDeleted
        self.inviteSent = inviteSent
        self.inviteAccepted = inviteAccepted
        self.inviteDeleted = inviteDeleted
        self.loginFailed = loginFailed
        self.logoutFailed = logoutFailed
        self.organizationUpdated = organizationUpdated
        self.projectCreated = projectCreated
        self.projectUpdated = projectUpdated
        self.projectArchived = projectArchived
        self.rateLimitUpdated = rateLimitUpdated
        self.rateLimitDeleted = rateLimitDeleted
        self.serviceAccountCreated = serviceAccountCreated
        self.serviceAccountUpdated = serviceAccountUpdated
        self.serviceAccountDeleted = serviceAccountDeleted
        self.userAdded = userAdded
        self.userUpdated = userUpdated
        self.userDeleted = userDeleted
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(String.self, forKey: "id")
        self.type = try values.decode(AuditLogEventType.self, forKey: "type")
        self.effectiveAt = try values.decode(Int.self, forKey: "effective_at")
        self.project = try values.decodeIfPresent(Project.self, forKey: "project")
        self.actor = try values.decode(AuditLogActor.self, forKey: "actor")
        self.apiKeyCreated = try values.decodeIfPresent(APIKeyCreated.self, forKey: "api_key.created")
        self.apiKeyUpdated = try values.decodeIfPresent(APIKeyUpdated.self, forKey: "api_key.updated")
        self.apiKeyDeleted = try values.decodeIfPresent(APIKeyDeleted.self, forKey: "api_key.deleted")
        self.inviteSent = try values.decodeIfPresent(InviteSent.self, forKey: "invite.sent")
        self.inviteAccepted = try values.decodeIfPresent(InviteAccepted.self, forKey: "invite.accepted")
        self.inviteDeleted = try values.decodeIfPresent(InviteDeleted.self, forKey: "invite.deleted")
        self.loginFailed = try values.decodeIfPresent(LoginFailed.self, forKey: "login.failed")
        self.logoutFailed = try values.decodeIfPresent(LogoutFailed.self, forKey: "logout.failed")
        self.organizationUpdated = try values.decodeIfPresent(OrganizationUpdated.self, forKey: "organization.updated")
        self.projectCreated = try values.decodeIfPresent(ProjectCreated.self, forKey: "project.created")
        self.projectUpdated = try values.decodeIfPresent(ProjectUpdated.self, forKey: "project.updated")
        self.projectArchived = try values.decodeIfPresent(ProjectArchived.self, forKey: "project.archived")
        self.rateLimitUpdated = try values.decodeIfPresent(RateLimitUpdated.self, forKey: "rate_limit.updated")
        self.rateLimitDeleted = try values.decodeIfPresent(RateLimitDeleted.self, forKey: "rate_limit.deleted")
        self.serviceAccountCreated = try values.decodeIfPresent(ServiceAccountCreated.self, forKey: "service_account.created")
        self.serviceAccountUpdated = try values.decodeIfPresent(ServiceAccountUpdated.self, forKey: "service_account.updated")
        self.serviceAccountDeleted = try values.decodeIfPresent(ServiceAccountDeleted.self, forKey: "service_account.deleted")
        self.userAdded = try values.decodeIfPresent(UserAdded.self, forKey: "user.added")
        self.userUpdated = try values.decodeIfPresent(UserUpdated.self, forKey: "user.updated")
        self.userDeleted = try values.decodeIfPresent(UserDeleted.self, forKey: "user.deleted")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(type, forKey: "type")
        try values.encode(effectiveAt, forKey: "effective_at")
        try values.encodeIfPresent(project, forKey: "project")
        try values.encode(actor, forKey: "actor")
        try values.encodeIfPresent(apiKeyCreated, forKey: "api_key.created")
        try values.encodeIfPresent(apiKeyUpdated, forKey: "api_key.updated")
        try values.encodeIfPresent(apiKeyDeleted, forKey: "api_key.deleted")
        try values.encodeIfPresent(inviteSent, forKey: "invite.sent")
        try values.encodeIfPresent(inviteAccepted, forKey: "invite.accepted")
        try values.encodeIfPresent(inviteDeleted, forKey: "invite.deleted")
        try values.encodeIfPresent(loginFailed, forKey: "login.failed")
        try values.encodeIfPresent(logoutFailed, forKey: "logout.failed")
        try values.encodeIfPresent(organizationUpdated, forKey: "organization.updated")
        try values.encodeIfPresent(projectCreated, forKey: "project.created")
        try values.encodeIfPresent(projectUpdated, forKey: "project.updated")
        try values.encodeIfPresent(projectArchived, forKey: "project.archived")
        try values.encodeIfPresent(rateLimitUpdated, forKey: "rate_limit.updated")
        try values.encodeIfPresent(rateLimitDeleted, forKey: "rate_limit.deleted")
        try values.encodeIfPresent(serviceAccountCreated, forKey: "service_account.created")
        try values.encodeIfPresent(serviceAccountUpdated, forKey: "service_account.updated")
        try values.encodeIfPresent(serviceAccountDeleted, forKey: "service_account.deleted")
        try values.encodeIfPresent(userAdded, forKey: "user.added")
        try values.encodeIfPresent(userUpdated, forKey: "user.updated")
        try values.encodeIfPresent(userDeleted, forKey: "user.deleted")
    }
}

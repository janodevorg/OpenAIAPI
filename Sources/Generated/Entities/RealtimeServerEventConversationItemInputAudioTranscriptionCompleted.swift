// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// This event is the output of audio transcription for user audio written to the 
/// user audio buffer. Transcription begins when the input audio buffer is 
/// committed by the client or server (in `server_vad` mode). Transcription runs 
/// asynchronously with Response creation, so this event may come before or after 
/// the Response events.
/// 
/// Realtime API models accept audio natively, and thus input transcription is a 
/// separate process run on a separate ASR (Automatic Speech Recognition) model, 
/// currently always `whisper-1`. Thus the transcript may diverge somewhat from 
/// the model's interpretation, and should be treated as a rough guide.
public struct RealtimeServerEventConversationItemInputAudioTranscriptionCompleted: Codable {
    /// The unique ID of the server event.
    public var eventID: String
    /// The event type, must be
    /// `conversation.item.input_audio_transcription.completed`.
    public var type: `Type`
    /// The ID of the user message item containing the audio.
    public var itemID: String
    /// The index of the content part containing the audio.
    public var contentIndex: Int
    /// The transcribed text.
    public var transcript: String

    /// The event type, must be
    /// `conversation.item.input_audio_transcription.completed`.
    public enum `Type`: String, Codable, CaseIterable {
        case conversationItemInputAudioTranscriptionCompleted = "conversation.item.input_audio_transcription.completed"
    }

    public init(eventID: String, type: `Type`, itemID: String, contentIndex: Int, transcript: String) {
        self.eventID = eventID
        self.type = type
        self.itemID = itemID
        self.contentIndex = contentIndex
        self.transcript = transcript
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.eventID = try values.decode(String.self, forKey: "event_id")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.itemID = try values.decode(String.self, forKey: "item_id")
        self.contentIndex = try values.decode(Int.self, forKey: "content_index")
        self.transcript = try values.decode(String.self, forKey: "transcript")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(eventID, forKey: "event_id")
        try values.encode(type, forKey: "type")
        try values.encode(itemID, forKey: "item_id")
        try values.encode(contentIndex, forKey: "content_index")
        try values.encode(transcript, forKey: "transcript")
    }
}

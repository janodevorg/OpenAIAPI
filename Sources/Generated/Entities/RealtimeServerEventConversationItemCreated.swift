// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Returned when a conversation item is created. There are several scenarios that 
/// produce this event:
///   - The server is generating a Response, which if successful will produce 
///     either one or two Items, which will be of type `message` 
///     (role `assistant`) or type `function_call`.
///   - The input audio buffer has been committed, either by the client or the 
///     server (in `server_vad` mode). The server will take the content of the 
///     input audio buffer and add it to a new user message Item.
///   - The client has sent a `conversation.item.create` event to add a new Item 
///     to the Conversation.
public struct RealtimeServerEventConversationItemCreated: Codable {
    /// The unique ID of the server event.
    public var eventID: String
    /// The event type, must be `conversation.item.created`.
    public var type: `Type`
    /// The ID of the preceding item in the Conversation context, allows the 
    /// client to understand the order of the conversation.
    public var previousItemID: String
    /// The item to add to the conversation.
    public var item: RealtimeConversationItem

    /// The event type, must be `conversation.item.created`.
    public enum `Type`: String, Codable, CaseIterable {
        case conversationItemCreated = "conversation.item.created"
    }

    public init(eventID: String, type: `Type`, previousItemID: String, item: RealtimeConversationItem) {
        self.eventID = eventID
        self.type = type
        self.previousItemID = previousItemID
        self.item = item
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.eventID = try values.decode(String.self, forKey: "event_id")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.previousItemID = try values.decode(String.self, forKey: "previous_item_id")
        self.item = try values.decode(RealtimeConversationItem.self, forKey: "item")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(eventID, forKey: "event_id")
        try values.encode(type, forKey: "type")
        try values.encode(previousItemID, forKey: "previous_item_id")
        try values.encode(item, forKey: "item")
    }
}

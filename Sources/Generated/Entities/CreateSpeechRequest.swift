// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CreateSpeechRequest: Codable {
    /// One of the available [TTS models](/docs/models#tts): `tts-1` or `tts-1-hd`
    public var model: Model
    /// The text to generate audio for. The maximum length is 4096 characters.
    public var input: String
    /// The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech#voice-options).
    public var voice: Voice
    /// The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
    public var responseFormat: ResponseFormat?
    /// The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
    public var speed: Double?

    /// One of the available [TTS models](/docs/models#tts): `tts-1` or `tts-1-hd`
    public struct Model: Codable {
        public var string: String?
        public var object: Object?

        public enum Object: String, Codable, CaseIterable {
            case tts1 = "tts-1"
            case tts1Hd = "tts-1-hd"
        }

        public init(string: String? = nil, object: Object? = nil) {
            self.string = string
            self.object = object
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.object = try? container.decode(Object.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = object { try container.encode(value) }
        }
    }

    /// The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech#voice-options).
    public enum Voice: String, Codable, CaseIterable {
        case alloy
        case echo
        case fable
        case onyx
        case nova
        case shimmer
    }

    /// The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
    public enum ResponseFormat: String, Codable, CaseIterable {
        case mp3
        case opus
        case aac
        case flac
        case wav
        case pcm
    }

    public init(model: Model, input: String, voice: Voice, responseFormat: ResponseFormat? = nil, speed: Double? = nil) {
        self.model = model
        self.input = input
        self.voice = voice
        self.responseFormat = responseFormat
        self.speed = speed
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.model = try values.decode(Model.self, forKey: "model")
        self.input = try values.decode(String.self, forKey: "input")
        self.voice = try values.decode(Voice.self, forKey: "voice")
        self.responseFormat = try values.decodeIfPresent(ResponseFormat.self, forKey: "response_format")
        self.speed = try values.decodeIfPresent(Double.self, forKey: "speed")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(model, forKey: "model")
        try values.encode(input, forKey: "input")
        try values.encode(voice, forKey: "voice")
        try values.encodeIfPresent(responseFormat, forKey: "response_format")
        try values.encodeIfPresent(speed, forKey: "speed")
    }
}

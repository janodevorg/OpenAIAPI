// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// File search tool call result
///
/// A result instance of the file search.
public struct RunStepDetailsToolCallsFileSearchResultObject: Codable {
    /// The ID of the file that result was found in.
    public var fileID: String
    /// The name of the file that result was found in.
    public var fileName: String
    /// The score of the result. All values must be a floating point number between 0 and 1.
    public var score: Double
    /// The content of the result that was found. The content is only included if requested via the include query parameter.
    public var content: [ContentItem]?

    public struct ContentItem: Codable {
        /// The type of the content.
        public var type: `Type`?
        /// The text content of the file.
        public var text: String?

        /// The type of the content.
        public enum `Type`: String, Codable, CaseIterable {
            case text
        }

        public init(type: `Type`? = nil, text: String? = nil) {
            self.type = type
            self.text = text
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.type = try values.decodeIfPresent(`Type`.self, forKey: "type")
            self.text = try values.decodeIfPresent(String.self, forKey: "text")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(type, forKey: "type")
            try values.encodeIfPresent(text, forKey: "text")
        }
    }

    public init(fileID: String, fileName: String, score: Double, content: [ContentItem]? = nil) {
        self.fileID = fileID
        self.fileName = fileName
        self.score = score
        self.content = content
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.fileID = try values.decode(String.self, forKey: "file_id")
        self.fileName = try values.decode(String.self, forKey: "file_name")
        self.score = try values.decode(Double.self, forKey: "score")
        self.content = try values.decodeIfPresent([ContentItem].self, forKey: "content")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(fileID, forKey: "file_id")
        try values.encode(fileName, forKey: "file_name")
        try values.encode(score, forKey: "score")
        try values.encodeIfPresent(content, forKey: "content")
    }
}

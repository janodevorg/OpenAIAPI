// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CreateChatCompletionRequest: Codable {
    /// A list of messages comprising the conversation so far. Depending on the
    /// [model](/docs/models) you use, different message types (modalities) are
    /// supported, like [text](/docs/guides/text-generation),
    /// [images](/docs/guides/vision), and [audio](/docs/guides/audio).
    public var messages: [ChatCompletionRequestMessage]
    /// ID of the model to use. See the [model endpoint compatibility](/docs/models#model-endpoint-compatibility) table for details on which models work with the Chat API.
    ///
    /// Example: "gpt-4o"
    public var model: Model
    /// Whether or not to store the output of this chat completion request for 
    /// use in our [model distillation](/docs/guides/distillation) or
    /// [evals](/docs/guides/evals) products.
    public var isStore: Bool
    /// **o1 models only** 
    /// 
    /// Constrains effort on reasoning for 
    /// [reasoning models](https://platform.openai.com/docs/guides/reasoning).
    /// Currently supported values are `low`, `medium`, and `high`. Reducing
    /// reasoning effort can result in faster responses and fewer tokens used
    /// on reasoning in a response.
    public var reasoningEffort: ReasoningEffort?
    /// Developer-defined tags and values used for filtering completions
    /// in the [dashboard](https://platform.openai.com/chat-completions).
    public var metadata: [String: String]?
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on
    /// their existing frequency in the text so far, decreasing the model's
    /// likelihood to repeat the same line verbatim.
    public var frequencyPenalty: Double?
    /// Modify the likelihood of specified tokens appearing in the completion.
    /// 
    /// Accepts a JSON object that maps tokens (specified by their token ID in the
    /// tokenizer) to an associated bias value from -100 to 100. Mathematically,
    /// the bias is added to the logits generated by the model prior to sampling.
    /// The exact effect will vary per model, but values between -1 and 1 should
    /// decrease or increase likelihood of selection; values like -100 or 100
    /// should result in a ban or exclusive selection of the relevant token.
    public var logitBias: [String: Int]?
    /// Whether to return log probabilities of the output tokens or not. If true,
    /// returns the log probabilities of each output token returned in the
    /// `content` of `message`.
    public var isLogprobs: Bool
    /// An integer between 0 and 20 specifying the number of most likely tokens to
    /// return at each token position, each with an associated log probability.
    /// `logprobs` must be set to `true` if this parameter is used.
    public var topLogprobs: Int?
    /// The maximum number of [tokens](/tokenizer) that can be generated in the
    /// chat completion. This value can be used to control
    /// [costs](https://openai.com/api/pricing/) for text generated via API.
    /// 
    /// This value is now deprecated in favor of `max_completion_tokens`, and is
    /// not compatible with [o1 series models](/docs/guides/reasoning).
    ///
    /// - warning: Deprecated.
    public var maxTokens: Int?
    /// An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).
    public var maxCompletionTokens: Int?
    /// How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
    public var n: Int?
    /// Output types that you would like the model to generate for this request.
    /// Most models are capable of generating text, which is the default:
    /// 
    /// `["text"]`
    /// 
    /// The `gpt-4o-audio-preview` model can also be used to [generate audio](/docs/guides/audio). To
    /// request that this model generate both text and audio responses, you can
    /// use:
    /// 
    /// `["text", "audio"]`
    public var modalities: [ChatCompletionModality]?
    /// Configuration for a [Predicted Output](/docs/guides/predicted-outputs),
    /// which can greatly improve response times when large parts of the model
    /// response are known ahead of time. This is most common when you are
    /// regenerating a file with only minor changes to most of the content.
    public var prediction: PredictionContent?
    /// Parameters for audio output. Required when audio output is requested with
    /// `modalities: ["audio"]`. [Learn more](/docs/guides/audio).
    public var audio: Audio?
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on
    /// whether they appear in the text so far, increasing the model's likelihood
    /// to talk about new topics.
    public var presencePenalty: Double?
    /// An object specifying the format that the model must output.
    /// 
    /// Setting to `{ "type": "json_schema", "json_schema": {...} }` enables
    /// Structured Outputs which ensures the model will match your supplied JSON
    /// schema. Learn more in the [Structured Outputs
    /// guide](/docs/guides/structured-outputs).
    /// 
    /// Setting to `{ "type": "json_object" }` enables JSON mode, which ensures
    /// the message the model generates is valid JSON.
    /// 
    /// **Important:** when using JSON mode, you **must** also instruct the model
    /// to produce JSON yourself via a system or user message. Without this, the
    /// model may generate an unending stream of whitespace until the generation
    /// reaches the token limit, resulting in a long-running and seemingly "stuck"
    /// request. Also note that the message content may be partially cut off if
    /// `finish_reason="length"`, which indicates the generation exceeded
    /// `max_tokens` or the conversation exceeded the max context length.
    public var responseFormat: ResponseFormat?
    /// This feature is in Beta.
    /// If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
    /// Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
    public var seed: Int?
    /// Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
    ///   - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.
    ///   - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
    ///   - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
    ///   - When not set, the default behavior is 'auto'.
    /// 
    ///   When this parameter is set, the response body will include the `service_tier` utilized.
    public var serviceTier: ServiceTier?
    /// Up to 4 sequences where the API will stop generating further tokens.
    public var stop: Stop?
    /// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
    public var isStream: Bool
    /// Options for streaming response. Only set this when you set `stream: true`.
    public var streamOptions: ChatCompletionStreamOptions?
    /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
    /// We generally recommend altering this or `top_p` but not both.
    public var temperature: Double?
    /// An alternative to sampling with temperature, called nucleus sampling,
    /// where the model considers the results of the tokens with top_p probability
    /// mass. So 0.1 means only the tokens comprising the top 10% probability mass
    /// are considered.
    /// 
    /// We generally recommend altering this or `temperature` but not both.
    public var topP: Double?
    /// A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
    public var tools: [ChatCompletionTool]?
    /// Controls which (if any) tool is called by the model.
    /// `none` means the model will not call any tool and instead generates a message.
    /// `auto` means the model can pick between generating a message or calling one or more tools.
    /// `required` means the model must call one or more tools.
    /// Specifying a particular tool via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
    /// 
    /// `none` is the default when no tools are present. `auto` is the default if tools are present.
    public var toolChoice: ChatCompletionToolChoiceOption?
    /// Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
    public var isParallelToolCalls: Bool
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
    ///
    /// Example: "user-1234"
    public var user: String?
    /// Deprecated in favor of `tool_choice`.
    /// 
    /// Controls which (if any) function is called by the model.
    /// 
    /// `none` means the model will not call a function and instead generates a
    /// message.
    /// 
    /// `auto` means the model can pick between generating a message or calling a
    /// function.
    /// 
    /// Specifying a particular function via `{"name": "my_function"}` forces the
    /// model to call that function.
    /// 
    /// `none` is the default when no functions are present. `auto` is the default
    /// if functions are present.
    ///
    /// - warning: Deprecated.
    public var functionCall: FunctionCall?
    /// Deprecated in favor of `tools`.
    /// 
    /// A list of functions the model may generate JSON inputs for.
    ///
    /// - warning: Deprecated.
    public var functions: [ChatCompletionFunctions]?

    /// ID of the model to use. See the [model endpoint compatibility](/docs/models#model-endpoint-compatibility) table for details on which models work with the Chat API.
    ///
    /// Example: "gpt-4o"
    public struct Model: Codable {
        public var string: String?
        public var object: Object?

        public enum Object: String, Codable, CaseIterable {
            case o1
            case o120241217 = "o1-2024-12-17"
            case o1Preview = "o1-preview"
            case o1Preview20240912 = "o1-preview-2024-09-12"
            case o1Mini = "o1-mini"
            case o1Mini20240912 = "o1-mini-2024-09-12"
            case gpt4o = "gpt-4o"
            case gpt4o20241120 = "gpt-4o-2024-11-20"
            case gpt4o20240806 = "gpt-4o-2024-08-06"
            case gpt4o20240513 = "gpt-4o-2024-05-13"
            case gpt4oAudioPreview = "gpt-4o-audio-preview"
            case gpt4oAudioPreview20241001 = "gpt-4o-audio-preview-2024-10-01"
            case gpt4oAudioPreview20241217 = "gpt-4o-audio-preview-2024-12-17"
            case gpt4oMiniAudioPreview = "gpt-4o-mini-audio-preview"
            case gpt4oMiniAudioPreview20241217 = "gpt-4o-mini-audio-preview-2024-12-17"
            case chatgpt4oLatest = "chatgpt-4o-latest"
            case gpt4oMini = "gpt-4o-mini"
            case gpt4oMini20240718 = "gpt-4o-mini-2024-07-18"
            case gpt4Turbo = "gpt-4-turbo"
            case gpt4Turbo20240409 = "gpt-4-turbo-2024-04-09"
            case gpt40125Preview = "gpt-4-0125-preview"
            case gpt4TurboPreview = "gpt-4-turbo-preview"
            case gpt41106Preview = "gpt-4-1106-preview"
            case gpt4VisionPreview = "gpt-4-vision-preview"
            case gpt4 = "gpt-4"
            case gpt40314 = "gpt-4-0314"
            case gpt40613 = "gpt-4-0613"
            case gpt432k = "gpt-4-32k"
            case gpt432k0314 = "gpt-4-32k-0314"
            case gpt432k0613 = "gpt-4-32k-0613"
            case gpt35Turbo = "gpt-3.5-turbo"
            case gpt35Turbo16k = "gpt-3.5-turbo-16k"
            case gpt35Turbo0301 = "gpt-3.5-turbo-0301"
            case gpt35Turbo0613 = "gpt-3.5-turbo-0613"
            case gpt35Turbo1106 = "gpt-3.5-turbo-1106"
            case gpt35Turbo0125 = "gpt-3.5-turbo-0125"
            case gpt35Turbo16k0613 = "gpt-3.5-turbo-16k-0613"
        }

        public init(string: String? = nil, object: Object? = nil) {
            self.string = string
            self.object = object
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.object = try? container.decode(Object.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = object { try container.encode(value) }
        }
    }

    /// **o1 models only** 
    /// 
    /// Constrains effort on reasoning for 
    /// [reasoning models](https://platform.openai.com/docs/guides/reasoning).
    /// Currently supported values are `low`, `medium`, and `high`. Reducing
    /// reasoning effort can result in faster responses and fewer tokens used
    /// on reasoning in a response.
    public enum ReasoningEffort: String, Codable, CaseIterable {
        case low
        case medium
        case high
    }

    /// Parameters for audio output. Required when audio output is requested with
    /// `modalities: ["audio"]`. [Learn more](/docs/guides/audio).
    public struct Audio: Codable {
        /// The voice the model uses to respond. Supported voices are `ash`, `ballad`, `coral`, `sage`, and `verse` (also supported but not recommended are `alloy`, `echo`, and `shimmer`; these voices are less expressive).
        public var voice: Voice
        /// Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
        /// `opus`, or `pcm16`.
        public var format: Format

        /// The voice the model uses to respond. Supported voices are `ash`, `ballad`, `coral`, `sage`, and `verse` (also supported but not recommended are `alloy`, `echo`, and `shimmer`; these voices are less expressive).
        public enum Voice: String, Codable, CaseIterable {
            case alloy
            case ash
            case ballad
            case coral
            case echo
            case sage
            case shimmer
            case verse
        }

        /// Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
        /// `opus`, or `pcm16`.
        public enum Format: String, Codable, CaseIterable {
            case wav
            case mp3
            case flac
            case opus
            case pcm16
        }

        public init(voice: Voice, format: Format) {
            self.voice = voice
            self.format = format
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.voice = try values.decode(Voice.self, forKey: "voice")
            self.format = try values.decode(Format.self, forKey: "format")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(voice, forKey: "voice")
            try values.encode(format, forKey: "format")
        }
    }

    /// An object specifying the format that the model must output.
    /// 
    /// Setting to `{ "type": "json_schema", "json_schema": {...} }` enables
    /// Structured Outputs which ensures the model will match your supplied JSON
    /// schema. Learn more in the [Structured Outputs
    /// guide](/docs/guides/structured-outputs).
    /// 
    /// Setting to `{ "type": "json_object" }` enables JSON mode, which ensures
    /// the message the model generates is valid JSON.
    /// 
    /// **Important:** when using JSON mode, you **must** also instruct the model
    /// to produce JSON yourself via a system or user message. Without this, the
    /// model may generate an unending stream of whitespace until the generation
    /// reaches the token limit, resulting in a long-running and seemingly "stuck"
    /// request. Also note that the message content may be partially cut off if
    /// `finish_reason="length"`, which indicates the generation exceeded
    /// `max_tokens` or the conversation exceeded the max context length.
    public enum ResponseFormat: Codable {
        case responseFormatText(ResponseFormatText)
        case responseFormatJSONObject(ResponseFormatJSONObject)
        case responseFormatJSONSchema(ResponseFormatJSONSchema)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(ResponseFormatText.self) {
                self = .responseFormatText(value)
            } else if let value = try? container.decode(ResponseFormatJSONObject.self) {
                self = .responseFormatJSONObject(value)
            } else if let value = try? container.decode(ResponseFormatJSONSchema.self) {
                self = .responseFormatJSONSchema(value)
            } else {
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "Data could not be decoded as any of the expected types (ResponseFormatText, ResponseFormatJSONObject, ResponseFormatJSONSchema)."
                )
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .responseFormatText(let value): try container.encode(value)
            case .responseFormatJSONObject(let value): try container.encode(value)
            case .responseFormatJSONSchema(let value): try container.encode(value)
            }
        }
    }

    /// Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
    ///   - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.
    ///   - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
    ///   - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
    ///   - When not set, the default behavior is 'auto'.
    /// 
    ///   When this parameter is set, the response body will include the `service_tier` utilized.
    public enum ServiceTier: String, Codable, CaseIterable {
        case auto
        case `default`
    }

    /// Up to 4 sequences where the API will stop generating further tokens.
    public enum Stop: Codable {
        case string(String)
        case strings([String])

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(String.self) {
                self = .string(value)
            } else if let value = try? container.decode([String].self) {
                self = .strings(value)
            } else {
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "Data could not be decoded as any of the expected types (String, [String])."
                )
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .string(let value): try container.encode(value)
            case .strings(let value): try container.encode(value)
            }
        }
    }

    /// Deprecated in favor of `tool_choice`.
    /// 
    /// Controls which (if any) function is called by the model.
    /// 
    /// `none` means the model will not call a function and instead generates a
    /// message.
    /// 
    /// `auto` means the model can pick between generating a message or calling a
    /// function.
    /// 
    /// Specifying a particular function via `{"name": "my_function"}` forces the
    /// model to call that function.
    /// 
    /// `none` is the default when no functions are present. `auto` is the default
    /// if functions are present.
    @available(*, deprecated, message: "Deprecated")
    public enum FunctionCall: Codable {
        case object(Object)
        case chatCompletionFunctionCallOption(ChatCompletionFunctionCallOption)

        /// `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
        public enum Object: String, Codable, CaseIterable {
            case `none`
            case auto
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(Object.self) {
                self = .object(value)
            } else if let value = try? container.decode(ChatCompletionFunctionCallOption.self) {
                self = .chatCompletionFunctionCallOption(value)
            } else {
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "Data could not be decoded as any of the expected types (Object, ChatCompletionFunctionCallOption)."
                )
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .object(let value): try container.encode(value)
            case .chatCompletionFunctionCallOption(let value): try container.encode(value)
            }
        }
    }

    public init(messages: [ChatCompletionRequestMessage], model: Model, isStore: Bool? = nil, reasoningEffort: ReasoningEffort? = nil, metadata: [String: String]? = nil, frequencyPenalty: Double? = nil, logitBias: [String: Int]? = nil, isLogprobs: Bool? = nil, topLogprobs: Int? = nil, maxTokens: Int? = nil, maxCompletionTokens: Int? = nil, n: Int? = nil, modalities: [ChatCompletionModality]? = nil, prediction: PredictionContent? = nil, audio: Audio? = nil, presencePenalty: Double? = nil, responseFormat: ResponseFormat? = nil, seed: Int? = nil, serviceTier: ServiceTier? = nil, stop: Stop? = nil, isStream: Bool? = nil, streamOptions: ChatCompletionStreamOptions? = nil, temperature: Double? = nil, topP: Double? = nil, tools: [ChatCompletionTool]? = nil, toolChoice: ChatCompletionToolChoiceOption? = nil, isParallelToolCalls: Bool? = nil, user: String? = nil, functionCall: FunctionCall? = nil, functions: [ChatCompletionFunctions]? = nil) {
        self.messages = messages
        self.model = model
        self.isStore = isStore ?? false
        self.reasoningEffort = reasoningEffort
        self.metadata = metadata
        self.frequencyPenalty = frequencyPenalty
        self.logitBias = logitBias
        self.isLogprobs = isLogprobs ?? false
        self.topLogprobs = topLogprobs
        self.maxTokens = maxTokens
        self.maxCompletionTokens = maxCompletionTokens
        self.n = n
        self.modalities = modalities
        self.prediction = prediction
        self.audio = audio
        self.presencePenalty = presencePenalty
        self.responseFormat = responseFormat
        self.seed = seed
        self.serviceTier = serviceTier
        self.stop = stop
        self.isStream = isStream ?? false
        self.streamOptions = streamOptions
        self.temperature = temperature
        self.topP = topP
        self.tools = tools
        self.toolChoice = toolChoice
        self.isParallelToolCalls = isParallelToolCalls ?? true
        self.user = user
        self.functionCall = functionCall
        self.functions = functions
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.messages = try values.decode([ChatCompletionRequestMessage].self, forKey: "messages")
        self.model = try values.decode(Model.self, forKey: "model")
        self.isStore = try values.decodeIfPresent(Bool.self, forKey: "store") ?? false
        self.reasoningEffort = try values.decodeIfPresent(ReasoningEffort.self, forKey: "reasoning_effort")
        self.metadata = try values.decodeIfPresent([String: String].self, forKey: "metadata")
        self.frequencyPenalty = try values.decodeIfPresent(Double.self, forKey: "frequency_penalty")
        self.logitBias = try values.decodeIfPresent([String: Int].self, forKey: "logit_bias")
        self.isLogprobs = try values.decodeIfPresent(Bool.self, forKey: "logprobs") ?? false
        self.topLogprobs = try values.decodeIfPresent(Int.self, forKey: "top_logprobs")
        self.maxTokens = try values.decodeIfPresent(Int.self, forKey: "max_tokens")
        self.maxCompletionTokens = try values.decodeIfPresent(Int.self, forKey: "max_completion_tokens")
        self.n = try values.decodeIfPresent(Int.self, forKey: "n")
        self.modalities = try values.decodeIfPresent([ChatCompletionModality].self, forKey: "modalities")
        self.prediction = try values.decodeIfPresent(PredictionContent.self, forKey: "prediction")
        self.audio = try values.decodeIfPresent(Audio.self, forKey: "audio")
        self.presencePenalty = try values.decodeIfPresent(Double.self, forKey: "presence_penalty")
        self.responseFormat = try values.decodeIfPresent(ResponseFormat.self, forKey: "response_format")
        self.seed = try values.decodeIfPresent(Int.self, forKey: "seed")
        self.serviceTier = try values.decodeIfPresent(ServiceTier.self, forKey: "service_tier")
        self.stop = try values.decodeIfPresent(Stop.self, forKey: "stop")
        self.isStream = try values.decodeIfPresent(Bool.self, forKey: "stream") ?? false
        self.streamOptions = try values.decodeIfPresent(ChatCompletionStreamOptions.self, forKey: "stream_options")
        self.temperature = try values.decodeIfPresent(Double.self, forKey: "temperature")
        self.topP = try values.decodeIfPresent(Double.self, forKey: "top_p")
        self.tools = try values.decodeIfPresent([ChatCompletionTool].self, forKey: "tools")
        self.toolChoice = try values.decodeIfPresent(ChatCompletionToolChoiceOption.self, forKey: "tool_choice")
        self.isParallelToolCalls = try values.decodeIfPresent(Bool.self, forKey: "parallel_tool_calls") ?? true
        self.user = try values.decodeIfPresent(String.self, forKey: "user")
        self.functionCall = try values.decodeIfPresent(FunctionCall.self, forKey: "function_call")
        self.functions = try values.decodeIfPresent([ChatCompletionFunctions].self, forKey: "functions")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(messages, forKey: "messages")
        try values.encode(model, forKey: "model")
        try values.encodeIfPresent(isStore, forKey: "store")
        try values.encodeIfPresent(reasoningEffort, forKey: "reasoning_effort")
        try values.encodeIfPresent(metadata, forKey: "metadata")
        try values.encodeIfPresent(frequencyPenalty, forKey: "frequency_penalty")
        try values.encodeIfPresent(logitBias, forKey: "logit_bias")
        try values.encodeIfPresent(isLogprobs, forKey: "logprobs")
        try values.encodeIfPresent(topLogprobs, forKey: "top_logprobs")
        try values.encodeIfPresent(maxTokens, forKey: "max_tokens")
        try values.encodeIfPresent(maxCompletionTokens, forKey: "max_completion_tokens")
        try values.encodeIfPresent(n, forKey: "n")
        try values.encodeIfPresent(modalities, forKey: "modalities")
        try values.encodeIfPresent(prediction, forKey: "prediction")
        try values.encodeIfPresent(audio, forKey: "audio")
        try values.encodeIfPresent(presencePenalty, forKey: "presence_penalty")
        try values.encodeIfPresent(responseFormat, forKey: "response_format")
        try values.encodeIfPresent(seed, forKey: "seed")
        try values.encodeIfPresent(serviceTier, forKey: "service_tier")
        try values.encodeIfPresent(stop, forKey: "stop")
        try values.encodeIfPresent(isStream, forKey: "stream")
        try values.encodeIfPresent(streamOptions, forKey: "stream_options")
        try values.encodeIfPresent(temperature, forKey: "temperature")
        try values.encodeIfPresent(topP, forKey: "top_p")
        try values.encodeIfPresent(tools, forKey: "tools")
        try values.encodeIfPresent(toolChoice, forKey: "tool_choice")
        try values.encodeIfPresent(isParallelToolCalls, forKey: "parallel_tool_calls")
        try values.encodeIfPresent(user, forKey: "user")
        try values.encodeIfPresent(functionCall, forKey: "function_call")
        try values.encodeIfPresent(functions, forKey: "functions")
    }
}

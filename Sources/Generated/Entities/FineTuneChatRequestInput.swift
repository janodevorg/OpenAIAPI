// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// The per-line training example of a fine-tuning input file for chat models using the supervised method.
public struct FineTuneChatRequestInput: Codable {
    public var messages: [Message]?
    /// A list of tools the model may generate JSON inputs for.
    public var tools: [ChatCompletionTool]?
    /// Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
    public var isParallelToolCalls: Bool
    /// A list of functions the model may generate JSON inputs for.
    ///
    /// - warning: Deprecated.
    public var functions: [ChatCompletionFunctions]?

    public enum Message: Codable {
        case chatCompletionRequestSystemMessage(ChatCompletionRequestSystemMessage)
        case chatCompletionRequestUserMessage(ChatCompletionRequestUserMessage)
        case fineTuneChatCompletionRequestAssistantMessage(FineTuneChatCompletionRequestAssistantMessage)
        case chatCompletionRequestToolMessage(ChatCompletionRequestToolMessage)
        case chatCompletionRequestFunctionMessage(ChatCompletionRequestFunctionMessage)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(ChatCompletionRequestSystemMessage.self) {
                self = .chatCompletionRequestSystemMessage(value)
            } else if let value = try? container.decode(ChatCompletionRequestUserMessage.self) {
                self = .chatCompletionRequestUserMessage(value)
            } else if let value = try? container.decode(FineTuneChatCompletionRequestAssistantMessage.self) {
                self = .fineTuneChatCompletionRequestAssistantMessage(value)
            } else if let value = try? container.decode(ChatCompletionRequestToolMessage.self) {
                self = .chatCompletionRequestToolMessage(value)
            } else if let value = try? container.decode(ChatCompletionRequestFunctionMessage.self) {
                self = .chatCompletionRequestFunctionMessage(value)
            } else {
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "Data could not be decoded as any of the expected types (ChatCompletionRequestSystemMessage, ChatCompletionRequestUserMessage, FineTuneChatCompletionRequestAssistantMessage, ChatCompletionRequestToolMessage, ChatCompletionRequestFunctionMessage)."
                )
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .chatCompletionRequestSystemMessage(let value): try container.encode(value)
            case .chatCompletionRequestUserMessage(let value): try container.encode(value)
            case .fineTuneChatCompletionRequestAssistantMessage(let value): try container.encode(value)
            case .chatCompletionRequestToolMessage(let value): try container.encode(value)
            case .chatCompletionRequestFunctionMessage(let value): try container.encode(value)
            }
        }
    }

    public init(messages: [Message]? = nil, tools: [ChatCompletionTool]? = nil, isParallelToolCalls: Bool? = nil, functions: [ChatCompletionFunctions]? = nil) {
        self.messages = messages
        self.tools = tools
        self.isParallelToolCalls = isParallelToolCalls ?? true
        self.functions = functions
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.messages = try values.decodeIfPresent([Message].self, forKey: "messages")
        self.tools = try values.decodeIfPresent([ChatCompletionTool].self, forKey: "tools")
        self.isParallelToolCalls = try values.decodeIfPresent(Bool.self, forKey: "parallel_tool_calls") ?? true
        self.functions = try values.decodeIfPresent([ChatCompletionFunctions].self, forKey: "functions")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(messages, forKey: "messages")
        try values.encodeIfPresent(tools, forKey: "tools")
        try values.encodeIfPresent(isParallelToolCalls, forKey: "parallel_tool_calls")
        try values.encodeIfPresent(functions, forKey: "functions")
    }
}

// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CreateClassificationResponse: Codable {
    public var object: String?
    public var model: String?
    public var searchModel: String?
    public var completion: String?
    public var label: String?
    public var selectedExamples: [SelectedExample]?

    public struct SelectedExample: Codable {
        public var document: Int?
        public var text: String?
        public var label: String?

        public init(document: Int? = nil, text: String? = nil, label: String? = nil) {
            self.document = document
            self.text = text
            self.label = label
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.document = try values.decodeIfPresent(Int.self, forKey: "document")
            self.text = try values.decodeIfPresent(String.self, forKey: "text")
            self.label = try values.decodeIfPresent(String.self, forKey: "label")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(document, forKey: "document")
            try values.encodeIfPresent(text, forKey: "text")
            try values.encodeIfPresent(label, forKey: "label")
        }
    }

    public init(object: String? = nil, model: String? = nil, searchModel: String? = nil, completion: String? = nil, label: String? = nil, selectedExamples: [SelectedExample]? = nil) {
        self.object = object
        self.model = model
        self.searchModel = searchModel
        self.completion = completion
        self.label = label
        self.selectedExamples = selectedExamples
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.object = try values.decodeIfPresent(String.self, forKey: "object")
        self.model = try values.decodeIfPresent(String.self, forKey: "model")
        self.searchModel = try values.decodeIfPresent(String.self, forKey: "search_model")
        self.completion = try values.decodeIfPresent(String.self, forKey: "completion")
        self.label = try values.decodeIfPresent(String.self, forKey: "label")
        self.selectedExamples = try values.decodeIfPresent([SelectedExample].self, forKey: "selected_examples")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(object, forKey: "object")
        try values.encodeIfPresent(model, forKey: "model")
        try values.encodeIfPresent(searchModel, forKey: "search_model")
        try values.encodeIfPresent(completion, forKey: "completion")
        try values.encodeIfPresent(label, forKey: "label")
        try values.encodeIfPresent(selectedExamples, forKey: "selected_examples")
    }
}

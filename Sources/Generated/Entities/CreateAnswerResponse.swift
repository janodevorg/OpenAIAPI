// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CreateAnswerResponse: Codable {
    public var object: String?
    public var model: String?
    public var searchModel: String?
    public var completion: String?
    public var answers: [String]?
    public var selectedDocuments: [SelectedDocumants]?

    public struct SelectedDocumants: Codable {
        public var document: Int?
        public var text: String?

        public init(document: Int? = nil, text: String? = nil) {
            self.document = document
            self.text = text
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.document = try values.decodeIfPresent(Int.self, forKey: "document")
            self.text = try values.decodeIfPresent(String.self, forKey: "text")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(document, forKey: "document")
            try values.encodeIfPresent(text, forKey: "text")
        }
    }

    public init(object: String? = nil, model: String? = nil, searchModel: String? = nil, completion: String? = nil, answers: [String]? = nil, selectedDocuments: [SelectedDocumants]? = nil) {
        self.object = object
        self.model = model
        self.searchModel = searchModel
        self.completion = completion
        self.answers = answers
        self.selectedDocuments = selectedDocuments
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.object = try values.decodeIfPresent(String.self, forKey: "object")
        self.model = try values.decodeIfPresent(String.self, forKey: "model")
        self.searchModel = try values.decodeIfPresent(String.self, forKey: "search_model")
        self.completion = try values.decodeIfPresent(String.self, forKey: "completion")
        self.answers = try values.decodeIfPresent([String].self, forKey: "answers")
        self.selectedDocuments = try values.decodeIfPresent([SelectedDocumants].self, forKey: "selected_documents")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(object, forKey: "object")
        try values.encodeIfPresent(model, forKey: "model")
        try values.encodeIfPresent(searchModel, forKey: "search_model")
        try values.encodeIfPresent(completion, forKey: "completion")
        try values.encodeIfPresent(answers, forKey: "answers")
        try values.encodeIfPresent(selectedDocuments, forKey: "selected_documents")
    }
}

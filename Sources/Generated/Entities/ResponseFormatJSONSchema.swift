// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct ResponseFormatJSONSchema: Codable {
    /// The type of response format being defined: `json_schema`
    public var type: `Type`
    public var jsonSchema: JSONSchema

    /// The type of response format being defined: `json_schema`
    public enum `Type`: String, Codable, CaseIterable {
        case jsonSchema = "json_schema"
    }

    public struct JSONSchema: Codable {
        /// A description of what the response format is for, used by the model to determine how to respond in the format.
        public var description: String?
        /// The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
        public var name: String
        /// The schema for the response format, described as a JSON Schema object.
        public var schema: [String: AnyJSON]?
        /// Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. To learn more, read the [Structured Outputs guide](/docs/guides/structured-outputs).
        public var isStrict: Bool

        public init(description: String? = nil, name: String, schema: [String: AnyJSON]? = nil, isStrict: Bool? = nil) {
            self.description = description
            self.name = name
            self.schema = schema
            self.isStrict = isStrict ?? false
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.description = try values.decodeIfPresent(String.self, forKey: "description")
            self.name = try values.decode(String.self, forKey: "name")
            self.schema = try values.decodeIfPresent([String: AnyJSON].self, forKey: "schema")
            self.isStrict = try values.decodeIfPresent(Bool.self, forKey: "strict") ?? false
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(description, forKey: "description")
            try values.encode(name, forKey: "name")
            try values.encodeIfPresent(schema, forKey: "schema")
            try values.encodeIfPresent(isStrict, forKey: "strict")
        }
    }

    public init(type: `Type`, jsonSchema: JSONSchema) {
        self.type = type
        self.jsonSchema = jsonSchema
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.jsonSchema = try values.decode(JSONSchema.self, forKey: "json_schema")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(type, forKey: "type")
        try values.encode(jsonSchema, forKey: "json_schema")
    }
}

// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Add a new Item to the Conversation's context, including messages, function 
/// calls, and function call responses. This event can be used both to populate a 
/// "history" of the conversation and to add new items mid-stream, but has the 
/// current limitation that it cannot populate assistant audio messages.
/// 
/// If successful, the server will respond with a `conversation.item.created` 
/// event, otherwise an `error` event will be sent.
public struct RealtimeClientEventConversationItemCreate: Codable {
    /// Optional client-generated ID used to identify this event.
    public var eventID: String?
    /// The event type, must be `conversation.item.create`.
    public var type: `Type`
    /// The ID of the preceding item after which the new item will be inserted. 
    /// If not set, the new item will be appended to the end of the conversation. 
    /// If set, it allows an item to be inserted mid-conversation. If the ID 
    /// cannot be found, an error will be returned and the item will not be added.
    public var previousItemID: String?
    /// The item to add to the conversation.
    public var item: RealtimeConversationItem

    /// The event type, must be `conversation.item.create`.
    public enum `Type`: String, Codable, CaseIterable {
        case conversationItemCreate = "conversation.item.create"
    }

    public init(eventID: String? = nil, type: `Type`, previousItemID: String? = nil, item: RealtimeConversationItem) {
        self.eventID = eventID
        self.type = type
        self.previousItemID = previousItemID
        self.item = item
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.eventID = try values.decodeIfPresent(String.self, forKey: "event_id")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.previousItemID = try values.decodeIfPresent(String.self, forKey: "previous_item_id")
        self.item = try values.decode(RealtimeConversationItem.self, forKey: "item")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(eventID, forKey: "event_id")
        try values.encode(type, forKey: "type")
        try values.encodeIfPresent(previousItemID, forKey: "previous_item_id")
        try values.encode(item, forKey: "item")
    }
}

// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// The aggregated costs details of the specific time bucket.
public struct CostsResult: Codable {
    public var object: Object
    /// The monetary value in its associated currency.
    public var amount: Amount?
    /// When `group_by=line_item`, this field provides the line item of the grouped costs result.
    public var lineItem: String?
    /// When `group_by=project_id`, this field provides the project ID of the grouped costs result.
    public var projectID: String?

    public enum Object: String, Codable, CaseIterable {
        case organizationCostsResult = "organization.costs.result"
    }

    /// The monetary value in its associated currency.
    public struct Amount: Codable {
        /// The numeric value of the cost.
        public var value: Double?
        /// Lowercase ISO-4217 currency e.g. "usd"
        public var currency: String?

        public init(value: Double? = nil, currency: String? = nil) {
            self.value = value
            self.currency = currency
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.value = try values.decodeIfPresent(Double.self, forKey: "value")
            self.currency = try values.decodeIfPresent(String.self, forKey: "currency")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(value, forKey: "value")
            try values.encodeIfPresent(currency, forKey: "currency")
        }
    }

    public init(object: Object, amount: Amount? = nil, lineItem: String? = nil, projectID: String? = nil) {
        self.object = object
        self.amount = amount
        self.lineItem = lineItem
        self.projectID = projectID
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.object = try values.decode(Object.self, forKey: "object")
        self.amount = try values.decodeIfPresent(Amount.self, forKey: "amount")
        self.lineItem = try values.decodeIfPresent(String.self, forKey: "line_item")
        self.projectID = try values.decodeIfPresent(String.self, forKey: "project_id")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(object, forKey: "object")
        try values.encodeIfPresent(amount, forKey: "amount")
        try values.encodeIfPresent(lineItem, forKey: "line_item")
        try values.encodeIfPresent(projectID, forKey: "project_id")
    }
}

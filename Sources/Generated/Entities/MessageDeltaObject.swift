// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Represents a message delta i.e. any changed fields on a message during streaming.
public struct MessageDeltaObject: Codable {
    /// The identifier of the message, which can be referenced in API endpoints.
    public var id: String
    /// The object type, which is always `thread.message.delta`.
    public var object: Object
    /// The delta containing the fields that have changed on the Message.
    public var delta: Delta

    /// The object type, which is always `thread.message.delta`.
    public enum Object: String, Codable, CaseIterable {
        case threadMessageDelta = "thread.message.delta"
    }

    /// The delta containing the fields that have changed on the Message.
    public struct Delta: Codable {
        /// The entity that produced the message. One of `user` or `assistant`.
        public var role: Role?
        /// The content of the message in array of text and/or images.
        public var content: [ContentItem]?

        /// The entity that produced the message. One of `user` or `assistant`.
        public enum Role: String, Codable, CaseIterable {
            case user
            case assistant
        }

        public enum ContentItem: Codable {
            case messageDeltaContentImageFileObject(MessageDeltaContentImageFileObject)
            case messageDeltaContentTextObject(MessageDeltaContentTextObject)
            case messageDeltaContentRefusalObject(MessageDeltaContentRefusalObject)
            case messageDeltaContentImageURLObject(MessageDeltaContentImageURLObject)

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                if let value = try? container.decode(MessageDeltaContentImageFileObject.self) {
                    self = .messageDeltaContentImageFileObject(value)
                } else if let value = try? container.decode(MessageDeltaContentTextObject.self) {
                    self = .messageDeltaContentTextObject(value)
                } else if let value = try? container.decode(MessageDeltaContentRefusalObject.self) {
                    self = .messageDeltaContentRefusalObject(value)
                } else if let value = try? container.decode(MessageDeltaContentImageURLObject.self) {
                    self = .messageDeltaContentImageURLObject(value)
                } else {
                    throw DecodingError.dataCorruptedError(
                        in: container,
                        debugDescription: "Data could not be decoded as any of the expected types (MessageDeltaContentImageFileObject, MessageDeltaContentTextObject, MessageDeltaContentRefusalObject, MessageDeltaContentImageURLObject)."
                    )
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .messageDeltaContentImageFileObject(let value): try container.encode(value)
                case .messageDeltaContentTextObject(let value): try container.encode(value)
                case .messageDeltaContentRefusalObject(let value): try container.encode(value)
                case .messageDeltaContentImageURLObject(let value): try container.encode(value)
                }
            }
        }

        public init(role: Role? = nil, content: [ContentItem]? = nil) {
            self.role = role
            self.content = content
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.role = try values.decodeIfPresent(Role.self, forKey: "role")
            self.content = try values.decodeIfPresent([ContentItem].self, forKey: "content")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(role, forKey: "role")
            try values.encodeIfPresent(content, forKey: "content")
        }
    }

    public init(id: String, object: Object, delta: Delta) {
        self.id = id
        self.object = object
        self.delta = delta
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(String.self, forKey: "id")
        self.object = try values.decode(Object.self, forKey: "object")
        self.delta = try values.decode(Delta.self, forKey: "delta")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(object, forKey: "object")
        try values.encode(delta, forKey: "delta")
    }
}

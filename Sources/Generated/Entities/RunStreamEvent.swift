// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public enum RunStreamEvent: Codable {
    case a(A)
    case b(B)
    case c(C)
    case d(D)
    case e(E)
    case f(F)
    case g(G)
    case h(H)
    case i(I)
    case j(J)

    /// Occurs when a new [run](/docs/api-reference/runs/object) is created.
    public struct A: Codable {
        public var event: Event
        /// A run on a thread
        ///
        /// Represents an execution run on a [thread](/docs/api-reference/threads).
        public var data: RunObject

        public enum Event: String, Codable, CaseIterable {
            case threadRunCreated = "thread.run.created"
        }

        public init(event: Event, data: RunObject) {
            self.event = event
            self.data = data
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.event = try values.decode(Event.self, forKey: "event")
            self.data = try values.decode(RunObject.self, forKey: "data")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(event, forKey: "event")
            try values.encode(data, forKey: "data")
        }
    }

    /// Occurs when a [run](/docs/api-reference/runs/object) moves to a `queued` status.
    public struct B: Codable {
        public var event: Event
        /// A run on a thread
        ///
        /// Represents an execution run on a [thread](/docs/api-reference/threads).
        public var data: RunObject

        public enum Event: String, Codable, CaseIterable {
            case threadRunQueued = "thread.run.queued"
        }

        public init(event: Event, data: RunObject) {
            self.event = event
            self.data = data
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.event = try values.decode(Event.self, forKey: "event")
            self.data = try values.decode(RunObject.self, forKey: "data")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(event, forKey: "event")
            try values.encode(data, forKey: "data")
        }
    }

    /// Occurs when a [run](/docs/api-reference/runs/object) moves to an `in_progress` status.
    public struct C: Codable {
        public var event: Event
        /// A run on a thread
        ///
        /// Represents an execution run on a [thread](/docs/api-reference/threads).
        public var data: RunObject

        public enum Event: String, Codable, CaseIterable {
            case threadRunInProgress = "thread.run.in_progress"
        }

        public init(event: Event, data: RunObject) {
            self.event = event
            self.data = data
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.event = try values.decode(Event.self, forKey: "event")
            self.data = try values.decode(RunObject.self, forKey: "data")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(event, forKey: "event")
            try values.encode(data, forKey: "data")
        }
    }

    /// Occurs when a [run](/docs/api-reference/runs/object) moves to a `requires_action` status.
    public struct D: Codable {
        public var event: Event
        /// A run on a thread
        ///
        /// Represents an execution run on a [thread](/docs/api-reference/threads).
        public var data: RunObject

        public enum Event: String, Codable, CaseIterable {
            case threadRunRequiresAction = "thread.run.requires_action"
        }

        public init(event: Event, data: RunObject) {
            self.event = event
            self.data = data
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.event = try values.decode(Event.self, forKey: "event")
            self.data = try values.decode(RunObject.self, forKey: "data")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(event, forKey: "event")
            try values.encode(data, forKey: "data")
        }
    }

    /// Occurs when a [run](/docs/api-reference/runs/object) is completed.
    public struct E: Codable {
        public var event: Event
        /// A run on a thread
        ///
        /// Represents an execution run on a [thread](/docs/api-reference/threads).
        public var data: RunObject

        public enum Event: String, Codable, CaseIterable {
            case threadRunCompleted = "thread.run.completed"
        }

        public init(event: Event, data: RunObject) {
            self.event = event
            self.data = data
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.event = try values.decode(Event.self, forKey: "event")
            self.data = try values.decode(RunObject.self, forKey: "data")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(event, forKey: "event")
            try values.encode(data, forKey: "data")
        }
    }

    /// Occurs when a [run](/docs/api-reference/runs/object) ends with status `incomplete`.
    public struct F: Codable {
        public var event: Event
        /// A run on a thread
        ///
        /// Represents an execution run on a [thread](/docs/api-reference/threads).
        public var data: RunObject

        public enum Event: String, Codable, CaseIterable {
            case threadRunIncomplete = "thread.run.incomplete"
        }

        public init(event: Event, data: RunObject) {
            self.event = event
            self.data = data
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.event = try values.decode(Event.self, forKey: "event")
            self.data = try values.decode(RunObject.self, forKey: "data")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(event, forKey: "event")
            try values.encode(data, forKey: "data")
        }
    }

    /// Occurs when a [run](/docs/api-reference/runs/object) fails.
    public struct G: Codable {
        public var event: Event
        /// A run on a thread
        ///
        /// Represents an execution run on a [thread](/docs/api-reference/threads).
        public var data: RunObject

        public enum Event: String, Codable, CaseIterable {
            case threadRunFailed = "thread.run.failed"
        }

        public init(event: Event, data: RunObject) {
            self.event = event
            self.data = data
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.event = try values.decode(Event.self, forKey: "event")
            self.data = try values.decode(RunObject.self, forKey: "data")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(event, forKey: "event")
            try values.encode(data, forKey: "data")
        }
    }

    /// Occurs when a [run](/docs/api-reference/runs/object) moves to a `cancelling` status.
    public struct H: Codable {
        public var event: Event
        /// A run on a thread
        ///
        /// Represents an execution run on a [thread](/docs/api-reference/threads).
        public var data: RunObject

        public enum Event: String, Codable, CaseIterable {
            case threadRunCancelling = "thread.run.cancelling"
        }

        public init(event: Event, data: RunObject) {
            self.event = event
            self.data = data
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.event = try values.decode(Event.self, forKey: "event")
            self.data = try values.decode(RunObject.self, forKey: "data")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(event, forKey: "event")
            try values.encode(data, forKey: "data")
        }
    }

    /// Occurs when a [run](/docs/api-reference/runs/object) is cancelled.
    public struct I: Codable {
        public var event: Event
        /// A run on a thread
        ///
        /// Represents an execution run on a [thread](/docs/api-reference/threads).
        public var data: RunObject

        public enum Event: String, Codable, CaseIterable {
            case threadRunCancelled = "thread.run.cancelled"
        }

        public init(event: Event, data: RunObject) {
            self.event = event
            self.data = data
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.event = try values.decode(Event.self, forKey: "event")
            self.data = try values.decode(RunObject.self, forKey: "data")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(event, forKey: "event")
            try values.encode(data, forKey: "data")
        }
    }

    /// Occurs when a [run](/docs/api-reference/runs/object) expires.
    public struct J: Codable {
        public var event: Event
        /// A run on a thread
        ///
        /// Represents an execution run on a [thread](/docs/api-reference/threads).
        public var data: RunObject

        public enum Event: String, Codable, CaseIterable {
            case threadRunExpired = "thread.run.expired"
        }

        public init(event: Event, data: RunObject) {
            self.event = event
            self.data = data
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.event = try values.decode(Event.self, forKey: "event")
            self.data = try values.decode(RunObject.self, forKey: "data")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(event, forKey: "event")
            try values.encode(data, forKey: "data")
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(A.self) {
            self = .a(value)
        } else if let value = try? container.decode(B.self) {
            self = .b(value)
        } else if let value = try? container.decode(C.self) {
            self = .c(value)
        } else if let value = try? container.decode(D.self) {
            self = .d(value)
        } else if let value = try? container.decode(E.self) {
            self = .e(value)
        } else if let value = try? container.decode(F.self) {
            self = .f(value)
        } else if let value = try? container.decode(G.self) {
            self = .g(value)
        } else if let value = try? container.decode(H.self) {
            self = .h(value)
        } else if let value = try? container.decode(I.self) {
            self = .i(value)
        } else if let value = try? container.decode(J.self) {
            self = .j(value)
        } else {
            throw DecodingError.dataCorruptedError(
                in: container,
                debugDescription: "Data could not be decoded as any of the expected types (A, B, C, D, E, F, G, H, I, J)."
            )
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .a(let value): try container.encode(value)
        case .b(let value): try container.encode(value)
        case .c(let value): try container.encode(value)
        case .d(let value): try container.encode(value)
        case .e(let value): try container.encode(value)
        case .f(let value): try container.encode(value)
        case .g(let value): try container.encode(value)
        case .h(let value): try container.encode(value)
        case .i(let value): try container.encode(value)
        case .j(let value): try container.encode(value)
        }
    }
}

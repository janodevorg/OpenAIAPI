// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct TranscriptionSegment: Codable {
    /// Unique identifier of the segment.
    public var id: Int
    /// Seek offset of the segment.
    public var seek: Int
    /// Start time of the segment in seconds.
    public var start: Float
    /// End time of the segment in seconds.
    public var end: Float
    /// Text content of the segment.
    public var text: String
    /// Array of token IDs for the text content.
    public var tokens: [Int]
    /// Temperature parameter used for generating the segment.
    public var temperature: Float
    /// Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
    public var avgLogprob: Float
    /// Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
    public var compressionRatio: Float
    /// Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
    public var noSpeechProb: Float

    public init(id: Int, seek: Int, start: Float, end: Float, text: String, tokens: [Int], temperature: Float, avgLogprob: Float, compressionRatio: Float, noSpeechProb: Float) {
        self.id = id
        self.seek = seek
        self.start = start
        self.end = end
        self.text = text
        self.tokens = tokens
        self.temperature = temperature
        self.avgLogprob = avgLogprob
        self.compressionRatio = compressionRatio
        self.noSpeechProb = noSpeechProb
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Int.self, forKey: "id")
        self.seek = try values.decode(Int.self, forKey: "seek")
        self.start = try values.decode(Float.self, forKey: "start")
        self.end = try values.decode(Float.self, forKey: "end")
        self.text = try values.decode(String.self, forKey: "text")
        self.tokens = try values.decode([Int].self, forKey: "tokens")
        self.temperature = try values.decode(Float.self, forKey: "temperature")
        self.avgLogprob = try values.decode(Float.self, forKey: "avg_logprob")
        self.compressionRatio = try values.decode(Float.self, forKey: "compression_ratio")
        self.noSpeechProb = try values.decode(Float.self, forKey: "no_speech_prob")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(seek, forKey: "seek")
        try values.encode(start, forKey: "start")
        try values.encode(end, forKey: "end")
        try values.encode(text, forKey: "text")
        try values.encode(tokens, forKey: "tokens")
        try values.encode(temperature, forKey: "temperature")
        try values.encode(avgLogprob, forKey: "avg_logprob")
        try values.encode(compressionRatio, forKey: "compression_ratio")
        try values.encode(noSpeechProb, forKey: "no_speech_prob")
    }
}

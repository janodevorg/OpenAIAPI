// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Returned when a conversation is created. Emitted right after session creation.
public struct RealtimeServerEventConversationCreated: Codable {
    /// The unique ID of the server event.
    public var eventID: String
    /// The event type, must be `conversation.created`.
    public var type: `Type`
    /// The conversation resource.
    public var conversation: Conversation

    /// The event type, must be `conversation.created`.
    public enum `Type`: String, Codable, CaseIterable {
        case conversationCreated = "conversation.created"
    }

    /// The conversation resource.
    public struct Conversation: Codable {
        /// The unique ID of the conversation.
        public var id: String?
        /// The object type, must be `realtime.conversation`.
        public var object: String?

        public init(id: String? = nil, object: String? = nil) {
            self.id = id
            self.object = object
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
            self.object = try values.decodeIfPresent(String.self, forKey: "object")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(object, forKey: "object")
        }
    }

    public init(eventID: String, type: `Type`, conversation: Conversation) {
        self.eventID = eventID
        self.type = type
        self.conversation = conversation
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.eventID = try values.decode(String.self, forKey: "event_id")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.conversation = try values.decode(Conversation.self, forKey: "conversation")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(eventID, forKey: "event_id")
        try values.encode(type, forKey: "type")
        try values.encode(conversation, forKey: "conversation")
    }
}

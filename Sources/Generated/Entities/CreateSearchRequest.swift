// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CreateSearchRequest: Codable {
    /// Query to search against the documents.
    ///
    /// Example: "the president"
    public var query: String
    /// Up to 200 documents to search over, provided as a list of strings.
    /// 
    /// The maximum document length (in tokens) is 2034 minus the number of tokens in the query.
    /// 
    /// You should specify either `documents` or a `file`, but not both.
    ///
    /// Example: "['White House', 'hospital', 'school']"
    public var documents: [String]?
    /// The ID of an uploaded file that contains documents to search over.
    /// 
    /// You should specify either `documents` or a `file`, but not both.
    public var file: String?
    /// The maximum number of documents to be re-ranked and returned by search.
    /// 
    /// This flag only takes effect when `file` is set.
    public var maxRerank: Int?
    /// A special boolean flag for showing metadata. If set to `true`, each document entry in the returned JSON will contain a "metadata" field.
    /// 
    /// This flag only takes effect when `file` is set.
    public var isReturnMetadata: Bool
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
    ///
    /// Example: "user-1234"
    public var user: String?

    public init(query: String, documents: [String]? = nil, file: String? = nil, maxRerank: Int? = nil, isReturnMetadata: Bool? = nil, user: String? = nil) {
        self.query = query
        self.documents = documents
        self.file = file
        self.maxRerank = maxRerank
        self.isReturnMetadata = isReturnMetadata ?? false
        self.user = user
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.query = try values.decode(String.self, forKey: "query")
        self.documents = try values.decodeIfPresent([String].self, forKey: "documents")
        self.file = try values.decodeIfPresent(String.self, forKey: "file")
        self.maxRerank = try values.decodeIfPresent(Int.self, forKey: "max_rerank")
        self.isReturnMetadata = try values.decodeIfPresent(Bool.self, forKey: "return_metadata") ?? false
        self.user = try values.decodeIfPresent(String.self, forKey: "user")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(query, forKey: "query")
        try values.encodeIfPresent(documents, forKey: "documents")
        try values.encodeIfPresent(file, forKey: "file")
        try values.encodeIfPresent(maxRerank, forKey: "max_rerank")
        try values.encodeIfPresent(isReturnMetadata, forKey: "return_metadata")
        try values.encodeIfPresent(user, forKey: "user")
    }
}

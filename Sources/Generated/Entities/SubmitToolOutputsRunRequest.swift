// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct SubmitToolOutputsRunRequest: Codable {
    /// A list of tools for which the outputs are being submitted.
    public var toolOutputs: [ToolOutput]
    /// If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
    public var isStream: Bool?

    public struct ToolOutput: Codable {
        /// The ID of the tool call in the `required_action` object within the run object the output is being submitted for.
        public var toolCallID: String?
        /// The output of the tool call to be submitted to continue the run.
        public var output: String?

        public init(toolCallID: String? = nil, output: String? = nil) {
            self.toolCallID = toolCallID
            self.output = output
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.toolCallID = try values.decodeIfPresent(String.self, forKey: "tool_call_id")
            self.output = try values.decodeIfPresent(String.self, forKey: "output")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(toolCallID, forKey: "tool_call_id")
            try values.encodeIfPresent(output, forKey: "output")
        }
    }

    public init(toolOutputs: [ToolOutput], isStream: Bool? = nil) {
        self.toolOutputs = toolOutputs
        self.isStream = isStream
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.toolOutputs = try values.decode([ToolOutput].self, forKey: "tool_outputs")
        self.isStream = try values.decodeIfPresent(Bool.self, forKey: "stream")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(toolOutputs, forKey: "tool_outputs")
        try values.encodeIfPresent(isStream, forKey: "stream")
    }
}

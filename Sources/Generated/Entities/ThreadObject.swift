// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Thread
///
/// Represents a thread that contains [messages](/docs/api-reference/messages).
public struct ThreadObject: Codable {
    /// The identifier, which can be referenced in API endpoints.
    public var id: String
    /// The object type, which is always `thread`.
    public var object: Object
    /// The Unix timestamp (in seconds) for when the thread was created.
    public var createdAt: Int
    /// A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
    public var toolResources: ToolResources?
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
    public var metadata: [String: AnyJSON]?

    /// The object type, which is always `thread`.
    public enum Object: String, Codable, CaseIterable {
        case thread
    }

    /// A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
    public struct ToolResources: Codable {
        public var codeInterpreter: CodeInterpreter?
        public var fileSearch: FileSearch?

        public struct CodeInterpreter: Codable {
            /// A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
            public var fileIDs: [String]?

            public init(fileIDs: [String]? = nil) {
                self.fileIDs = fileIDs
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.fileIDs = try values.decodeIfPresent([String].self, forKey: "file_ids")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(fileIDs, forKey: "file_ids")
            }
        }

        public struct FileSearch: Codable {
            /// The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
            public var vectorStoreIDs: [String]?

            public init(vectorStoreIDs: [String]? = nil) {
                self.vectorStoreIDs = vectorStoreIDs
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.vectorStoreIDs = try values.decodeIfPresent([String].self, forKey: "vector_store_ids")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(vectorStoreIDs, forKey: "vector_store_ids")
            }
        }

        public init(codeInterpreter: CodeInterpreter? = nil, fileSearch: FileSearch? = nil) {
            self.codeInterpreter = codeInterpreter
            self.fileSearch = fileSearch
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.codeInterpreter = try values.decodeIfPresent(CodeInterpreter.self, forKey: "code_interpreter")
            self.fileSearch = try values.decodeIfPresent(FileSearch.self, forKey: "file_search")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(codeInterpreter, forKey: "code_interpreter")
            try values.encodeIfPresent(fileSearch, forKey: "file_search")
        }
    }

    public init(id: String, object: Object, createdAt: Int, toolResources: ToolResources? = nil, metadata: [String: AnyJSON]? = nil) {
        self.id = id
        self.object = object
        self.createdAt = createdAt
        self.toolResources = toolResources
        self.metadata = metadata
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(String.self, forKey: "id")
        self.object = try values.decode(Object.self, forKey: "object")
        self.createdAt = try values.decode(Int.self, forKey: "created_at")
        self.toolResources = try values.decodeIfPresent(ToolResources.self, forKey: "tool_resources")
        self.metadata = try values.decodeIfPresent([String: AnyJSON].self, forKey: "metadata")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(object, forKey: "object")
        try values.encode(createdAt, forKey: "created_at")
        try values.encodeIfPresent(toolResources, forKey: "tool_resources")
        try values.encodeIfPresent(metadata, forKey: "metadata")
    }
}

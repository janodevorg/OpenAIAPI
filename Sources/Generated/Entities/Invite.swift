// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Represents an individual `invite` to the organization.
public struct Invite: Codable {
    /// The object type, which is always `organization.invite`
    public var object: Object
    /// The identifier, which can be referenced in API endpoints
    public var id: String
    /// The email address of the individual to whom the invite was sent
    public var email: String
    /// `owner` or `reader`
    public var role: Role
    /// `accepted`,`expired`, or `pending`
    public var status: Status
    /// The Unix timestamp (in seconds) of when the invite was sent.
    public var invitedAt: Int
    /// The Unix timestamp (in seconds) of when the invite expires.
    public var expiresAt: Int
    /// The Unix timestamp (in seconds) of when the invite was accepted.
    public var acceptedAt: Int?
    /// The projects that were granted membership upon acceptance of the invite.
    public var projects: [Project]?

    /// The object type, which is always `organization.invite`
    public enum Object: String, Codable, CaseIterable {
        case organizationInvite = "organization.invite"
    }

    /// `owner` or `reader`
    public enum Role: String, Codable, CaseIterable {
        case owner
        case reader
    }

    /// `accepted`,`expired`, or `pending`
    public enum Status: String, Codable, CaseIterable {
        case accepted
        case expired
        case pending
    }

    public struct Project: Codable {
        /// Project's public ID
        public var id: String?
        /// Project membership role
        public var role: Role?

        /// Project membership role
        public enum Role: String, Codable, CaseIterable {
            case member
            case owner
        }

        public init(id: String? = nil, role: Role? = nil) {
            self.id = id
            self.role = role
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
            self.role = try values.decodeIfPresent(Role.self, forKey: "role")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(role, forKey: "role")
        }
    }

    public init(object: Object, id: String, email: String, role: Role, status: Status, invitedAt: Int, expiresAt: Int, acceptedAt: Int? = nil, projects: [Project]? = nil) {
        self.object = object
        self.id = id
        self.email = email
        self.role = role
        self.status = status
        self.invitedAt = invitedAt
        self.expiresAt = expiresAt
        self.acceptedAt = acceptedAt
        self.projects = projects
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.object = try values.decode(Object.self, forKey: "object")
        self.id = try values.decode(String.self, forKey: "id")
        self.email = try values.decode(String.self, forKey: "email")
        self.role = try values.decode(Role.self, forKey: "role")
        self.status = try values.decode(Status.self, forKey: "status")
        self.invitedAt = try values.decode(Int.self, forKey: "invited_at")
        self.expiresAt = try values.decode(Int.self, forKey: "expires_at")
        self.acceptedAt = try values.decodeIfPresent(Int.self, forKey: "accepted_at")
        self.projects = try values.decodeIfPresent([Project].self, forKey: "projects")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(object, forKey: "object")
        try values.encode(id, forKey: "id")
        try values.encode(email, forKey: "email")
        try values.encode(role, forKey: "role")
        try values.encode(status, forKey: "status")
        try values.encode(invitedAt, forKey: "invited_at")
        try values.encode(expiresAt, forKey: "expires_at")
        try values.encodeIfPresent(acceptedAt, forKey: "accepted_at")
        try values.encodeIfPresent(projects, forKey: "projects")
    }
}

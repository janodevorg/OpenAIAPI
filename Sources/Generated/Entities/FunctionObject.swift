// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct FunctionObject: Codable {
    /// A description of what the function does, used by the model to choose when and how to call the function.
    public var description: String?
    /// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
    public var name: String
    /// The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. 
    /// 
    /// Omitting `parameters` defines a function with an empty parameter list.
    public var parameters: [String: AnyJSON]?
    /// Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling).
    public var isStrict: Bool

    public init(description: String? = nil, name: String, parameters: [String: AnyJSON]? = nil, isStrict: Bool? = nil) {
        self.description = description
        self.name = name
        self.parameters = parameters
        self.isStrict = isStrict ?? false
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.name = try values.decode(String.self, forKey: "name")
        self.parameters = try values.decodeIfPresent([String: AnyJSON].self, forKey: "parameters")
        self.isStrict = try values.decodeIfPresent(Bool.self, forKey: "strict") ?? false
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(description, forKey: "description")
        try values.encode(name, forKey: "name")
        try values.encodeIfPresent(parameters, forKey: "parameters")
        try values.encodeIfPresent(isStrict, forKey: "strict")
    }
}

// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct AdminAPIKey: Codable {
    /// Example: "organization.admin_api_key"
    public var object: String?
    /// Example: "key_abc"
    public var id: String?
    /// Example: "Administration Key"
    public var name: String?
    /// Example: "sk-admin...def"
    public var redactedValue: String?
    /// Example: "sk-admin-1234abcd"
    public var value: String?
    /// Example: 1711471533
    public var createdAt: Int64?
    public var owner: Owner?

    public struct Owner: Codable {
        /// Example: "service_account"
        public var type: String?
        /// Example: "sa_456"
        public var id: String?
        /// Example: "My Service Account"
        public var name: String?
        /// Example: 1711471533
        public var createdAt: Int64?
        /// Example: "member"
        public var role: String?

        public init(type: String? = nil, id: String? = nil, name: String? = nil, createdAt: Int64? = nil, role: String? = nil) {
            self.type = type
            self.id = id
            self.name = name
            self.createdAt = createdAt
            self.role = role
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.type = try values.decodeIfPresent(String.self, forKey: "type")
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
            self.name = try values.decodeIfPresent(String.self, forKey: "name")
            self.createdAt = try values.decodeIfPresent(Int64.self, forKey: "created_at")
            self.role = try values.decodeIfPresent(String.self, forKey: "role")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(type, forKey: "type")
            try values.encodeIfPresent(id, forKey: "id")
            try values.encodeIfPresent(name, forKey: "name")
            try values.encodeIfPresent(createdAt, forKey: "created_at")
            try values.encodeIfPresent(role, forKey: "role")
        }
    }

    public init(object: String? = nil, id: String? = nil, name: String? = nil, redactedValue: String? = nil, value: String? = nil, createdAt: Int64? = nil, owner: Owner? = nil) {
        self.object = object
        self.id = id
        self.name = name
        self.redactedValue = redactedValue
        self.value = value
        self.createdAt = createdAt
        self.owner = owner
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.object = try values.decodeIfPresent(String.self, forKey: "object")
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.redactedValue = try values.decodeIfPresent(String.self, forKey: "redacted_value")
        self.value = try values.decodeIfPresent(String.self, forKey: "value")
        self.createdAt = try values.decodeIfPresent(Int64.self, forKey: "created_at")
        self.owner = try values.decodeIfPresent(Owner.self, forKey: "owner")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(object, forKey: "object")
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(redactedValue, forKey: "redacted_value")
        try values.encodeIfPresent(value, forKey: "value")
        try values.encodeIfPresent(createdAt, forKey: "created_at")
        try values.encodeIfPresent(owner, forKey: "owner")
    }
}

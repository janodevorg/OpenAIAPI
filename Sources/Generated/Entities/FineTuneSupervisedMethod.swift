// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Configuration for the supervised fine-tuning method.
public struct FineTuneSupervisedMethod: Codable {
    /// The hyperparameters used for the fine-tuning job.
    public var hyperparameters: Hyperparameters?

    /// The hyperparameters used for the fine-tuning job.
    public struct Hyperparameters: Codable {
        /// Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
        public var batchSize: BatchSize?
        /// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
        public var learningRateMultiplier: LearningRateMultiplier?
        /// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
        public var nEpochs: NEpochs?

        /// Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
        public enum BatchSize: Codable {
            case object(Object)
            case int(Int)

            public enum Object: String, Codable, CaseIterable {
                case auto
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                if let value = try? container.decode(Object.self) {
                    self = .object(value)
                } else if let value = try? container.decode(Int.self) {
                    self = .int(value)
                } else {
                    throw DecodingError.dataCorruptedError(
                        in: container,
                        debugDescription: "Data could not be decoded as any of the expected types (Object, Int)."
                    )
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .int(let value): try container.encode(value)
                }
            }
        }

        /// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
        public enum LearningRateMultiplier: Codable {
            case object(Object)
            case double(Double)

            public enum Object: String, Codable, CaseIterable {
                case auto
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                if let value = try? container.decode(Object.self) {
                    self = .object(value)
                } else if let value = try? container.decode(Double.self) {
                    self = .double(value)
                } else {
                    throw DecodingError.dataCorruptedError(
                        in: container,
                        debugDescription: "Data could not be decoded as any of the expected types (Object, Double)."
                    )
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .double(let value): try container.encode(value)
                }
            }
        }

        /// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
        public enum NEpochs: Codable {
            case object(Object)
            case int(Int)

            public enum Object: String, Codable, CaseIterable {
                case auto
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                if let value = try? container.decode(Object.self) {
                    self = .object(value)
                } else if let value = try? container.decode(Int.self) {
                    self = .int(value)
                } else {
                    throw DecodingError.dataCorruptedError(
                        in: container,
                        debugDescription: "Data could not be decoded as any of the expected types (Object, Int)."
                    )
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .object(let value): try container.encode(value)
                case .int(let value): try container.encode(value)
                }
            }
        }

        public init(batchSize: BatchSize? = nil, learningRateMultiplier: LearningRateMultiplier? = nil, nEpochs: NEpochs? = nil) {
            self.batchSize = batchSize
            self.learningRateMultiplier = learningRateMultiplier
            self.nEpochs = nEpochs
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.batchSize = try values.decodeIfPresent(BatchSize.self, forKey: "batch_size")
            self.learningRateMultiplier = try values.decodeIfPresent(LearningRateMultiplier.self, forKey: "learning_rate_multiplier")
            self.nEpochs = try values.decodeIfPresent(NEpochs.self, forKey: "n_epochs")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(batchSize, forKey: "batch_size")
            try values.encodeIfPresent(learningRateMultiplier, forKey: "learning_rate_multiplier")
            try values.encodeIfPresent(nEpochs, forKey: "n_epochs")
        }
    }

    public init(hyperparameters: Hyperparameters? = nil) {
        self.hyperparameters = hyperparameters
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.hyperparameters = try values.decodeIfPresent(Hyperparameters.self, forKey: "hyperparameters")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(hyperparameters, forKey: "hyperparameters")
    }
}

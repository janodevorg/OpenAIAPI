// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// User message
///
/// Messages sent by an end user, containing prompts or additional context
/// information.
public struct ChatCompletionRequestUserMessage: Codable {
    /// The contents of the user message.
    public var content: Content
    /// The role of the messages author, in this case `user`.
    public var role: Role
    /// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
    public var name: String?

    /// The contents of the user message.
    public enum Content: Codable {
        case string(String)
        case chatCompletionRequestUserMessageContentParts([ChatCompletionRequestUserMessageContentPart])

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(String.self) {
                self = .string(value)
            } else if let value = try? container.decode([ChatCompletionRequestUserMessageContentPart].self) {
                self = .chatCompletionRequestUserMessageContentParts(value)
            } else {
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "Data could not be decoded as any of the expected types (String, [ChatCompletionRequestUserMessageContentPart])."
                )
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .string(let value): try container.encode(value)
            case .chatCompletionRequestUserMessageContentParts(let value): try container.encode(value)
            }
        }
    }

    /// The role of the messages author, in this case `user`.
    public enum Role: String, Codable, CaseIterable {
        case user
    }

    public init(content: Content, role: Role, name: String? = nil) {
        self.content = content
        self.role = role
        self.name = name
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.content = try values.decode(Content.self, forKey: "content")
        self.role = try values.decode(Role.self, forKey: "role")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(content, forKey: "content")
        try values.encode(role, forKey: "role")
        try values.encodeIfPresent(name, forKey: "name")
    }
}

// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Function tool call
public struct RunStepDetailsToolCallsFunctionObject: Codable {
    /// The ID of the tool call object.
    public var id: String
    /// The type of tool call. This is always going to be `function` for this type of tool call.
    public var type: `Type`
    /// The definition of the function that was called.
    public var function: Function

    /// The type of tool call. This is always going to be `function` for this type of tool call.
    public enum `Type`: String, Codable, CaseIterable {
        case function
    }

    /// The definition of the function that was called.
    public struct Function: Codable {
        /// The name of the function.
        public var name: String
        /// The arguments passed to the function.
        public var arguments: String
        /// The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
        public var output: String?

        public init(name: String, arguments: String, output: String? = nil) {
            self.name = name
            self.arguments = arguments
            self.output = output
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.name = try values.decode(String.self, forKey: "name")
            self.arguments = try values.decode(String.self, forKey: "arguments")
            self.output = try values.decodeIfPresent(String.self, forKey: "output")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(name, forKey: "name")
            try values.encode(arguments, forKey: "arguments")
            try values.encodeIfPresent(output, forKey: "output")
        }
    }

    public init(id: String, type: `Type`, function: Function) {
        self.id = id
        self.type = type
        self.function = function
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(String.self, forKey: "id")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.function = try values.decode(Function.self, forKey: "function")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(type, forKey: "type")
        try values.encode(function, forKey: "function")
    }
}

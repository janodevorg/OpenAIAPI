// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Send this event to append audio bytes to the input audio buffer. The audio 
/// buffer is temporary storage you can write to and later commit. In Server VAD 
/// mode, the audio buffer is used to detect speech and the server will decide 
/// when to commit. When Server VAD is disabled, you must commit the audio buffer
/// manually.
/// 
/// The client may choose how much audio to place in each event up to a maximum 
/// of 15 MiB, for example streaming smaller chunks from the client may allow the 
/// VAD to be more responsive. Unlike made other client events, the server will 
/// not send a confirmation response to this event.
public struct RealtimeClientEventInputAudioBufferAppend: Codable {
    /// Optional client-generated ID used to identify this event.
    public var eventID: String?
    /// The event type, must be `input_audio_buffer.append`.
    public var type: `Type`
    /// Base64-encoded audio bytes. This must be in the format specified by the 
    /// `input_audio_format` field in the session configuration.
    public var audio: String

    /// The event type, must be `input_audio_buffer.append`.
    public enum `Type`: String, Codable, CaseIterable {
        case inputAudioBufferAppend = "input_audio_buffer.append"
    }

    public init(eventID: String? = nil, type: `Type`, audio: String) {
        self.eventID = eventID
        self.type = type
        self.audio = audio
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.eventID = try values.decodeIfPresent(String.self, forKey: "event_id")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.audio = try values.decode(String.self, forKey: "audio")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(eventID, forKey: "event_id")
        try values.encode(type, forKey: "type")
        try values.encode(audio, forKey: "audio")
    }
}

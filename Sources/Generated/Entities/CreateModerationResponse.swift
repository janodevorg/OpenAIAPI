// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CreateModerationResponse: Codable {
    public var id: String
    public var model: String
    public var results: [Result]

    public struct Result: Codable {
        public var isFlagged: Bool
        public var categories: Categories
        public var categoryScores: CategoryScores

        public struct Categories: Codable {
            public var isHate: Bool
            public var isHateThreatening: Bool
            public var isSelfHarm: Bool
            public var isSexual: Bool
            public var isSexualMinors: Bool
            public var isViolence: Bool
            public var isViolenceGraphic: Bool

            public init(isHate: Bool, isHateThreatening: Bool, isSelfHarm: Bool, isSexual: Bool, isSexualMinors: Bool, isViolence: Bool, isViolenceGraphic: Bool) {
                self.isHate = isHate
                self.isHateThreatening = isHateThreatening
                self.isSelfHarm = isSelfHarm
                self.isSexual = isSexual
                self.isSexualMinors = isSexualMinors
                self.isViolence = isViolence
                self.isViolenceGraphic = isViolenceGraphic
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.isHate = try values.decode(Bool.self, forKey: "hate")
                self.isHateThreatening = try values.decode(Bool.self, forKey: "hate/threatening")
                self.isSelfHarm = try values.decode(Bool.self, forKey: "self-harm")
                self.isSexual = try values.decode(Bool.self, forKey: "sexual")
                self.isSexualMinors = try values.decode(Bool.self, forKey: "sexual/minors")
                self.isViolence = try values.decode(Bool.self, forKey: "violence")
                self.isViolenceGraphic = try values.decode(Bool.self, forKey: "violence/graphic")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(isHate, forKey: "hate")
                try values.encode(isHateThreatening, forKey: "hate/threatening")
                try values.encode(isSelfHarm, forKey: "self-harm")
                try values.encode(isSexual, forKey: "sexual")
                try values.encode(isSexualMinors, forKey: "sexual/minors")
                try values.encode(isViolence, forKey: "violence")
                try values.encode(isViolenceGraphic, forKey: "violence/graphic")
            }
        }

        public struct CategoryScores: Codable {
            public var hate: Double
            public var hateThreatening: Double
            public var selfHarm: Double
            public var sexual: Double
            public var sexualMinors: Double
            public var violence: Double
            public var violenceGraphic: Double

            public init(hate: Double, hateThreatening: Double, selfHarm: Double, sexual: Double, sexualMinors: Double, violence: Double, violenceGraphic: Double) {
                self.hate = hate
                self.hateThreatening = hateThreatening
                self.selfHarm = selfHarm
                self.sexual = sexual
                self.sexualMinors = sexualMinors
                self.violence = violence
                self.violenceGraphic = violenceGraphic
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.hate = try values.decode(Double.self, forKey: "hate")
                self.hateThreatening = try values.decode(Double.self, forKey: "hate/threatening")
                self.selfHarm = try values.decode(Double.self, forKey: "self-harm")
                self.sexual = try values.decode(Double.self, forKey: "sexual")
                self.sexualMinors = try values.decode(Double.self, forKey: "sexual/minors")
                self.violence = try values.decode(Double.self, forKey: "violence")
                self.violenceGraphic = try values.decode(Double.self, forKey: "violence/graphic")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(hate, forKey: "hate")
                try values.encode(hateThreatening, forKey: "hate/threatening")
                try values.encode(selfHarm, forKey: "self-harm")
                try values.encode(sexual, forKey: "sexual")
                try values.encode(sexualMinors, forKey: "sexual/minors")
                try values.encode(violence, forKey: "violence")
                try values.encode(violenceGraphic, forKey: "violence/graphic")
            }
        }

        public init(isFlagged: Bool, categories: Categories, categoryScores: CategoryScores) {
            self.isFlagged = isFlagged
            self.categories = categories
            self.categoryScores = categoryScores
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.isFlagged = try values.decode(Bool.self, forKey: "flagged")
            self.categories = try values.decode(Categories.self, forKey: "categories")
            self.categoryScores = try values.decode(CategoryScores.self, forKey: "category_scores")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(isFlagged, forKey: "flagged")
            try values.encode(categories, forKey: "categories")
            try values.encode(categoryScores, forKey: "category_scores")
        }
    }

    public init(id: String, model: String, results: [Result]) {
        self.id = id
        self.model = model
        self.results = results
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(String.self, forKey: "id")
        self.model = try values.decode(String.self, forKey: "model")
        self.results = try values.decode([Result].self, forKey: "results")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(model, forKey: "model")
        try values.encode(results, forKey: "results")
    }
}

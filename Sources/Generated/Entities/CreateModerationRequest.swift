// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CreateModerationRequest: Codable {
    /// The input text to classify
    public var input: Input
    /// Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.
    /// 
    /// The default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`.
    ///
    /// Example: "text-moderation-stable"
    public var model: String?

    /// The input text to classify
    public enum Input: Codable {
        case string(String)
        case strings([String])

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(String.self) {
                self = .string(value)
            } else if let value = try? container.decode([String].self) {
                self = .strings(value)
            } else {
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "Data could not be decoded as any of the expected types (String, [String])."
                )
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .string(let value): try container.encode(value)
            case .strings(let value): try container.encode(value)
            }
        }
    }

    public init(input: Input, model: String? = nil) {
        self.input = input
        self.model = model
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.input = try values.decode(Input.self, forKey: "input")
        self.model = try values.decodeIfPresent(String.self, forKey: "model")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(input, forKey: "input")
        try values.encodeIfPresent(model, forKey: "model")
    }
}

// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// File citation
///
/// A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "file_search" tool to search files.
public struct MessageContentTextAnnotationsFileCitationObject: Codable {
    /// Always `file_citation`.
    public var type: `Type`
    /// The text in the message content that needs to be replaced.
    public var text: String
    public var fileCitation: FileCitation
    public var startIndex: Int
    public var endIndex: Int

    /// Always `file_citation`.
    public enum `Type`: String, Codable, CaseIterable {
        case fileCitation = "file_citation"
    }

    public struct FileCitation: Codable {
        /// The ID of the specific File the citation is from.
        public var fileID: String

        public init(fileID: String) {
            self.fileID = fileID
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.fileID = try values.decode(String.self, forKey: "file_id")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(fileID, forKey: "file_id")
        }
    }

    public init(type: `Type`, text: String, fileCitation: FileCitation, startIndex: Int, endIndex: Int) {
        self.type = type
        self.text = text
        self.fileCitation = fileCitation
        self.startIndex = startIndex
        self.endIndex = endIndex
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.text = try values.decode(String.self, forKey: "text")
        self.fileCitation = try values.decode(FileCitation.self, forKey: "file_citation")
        self.startIndex = try values.decode(Int.self, forKey: "start_index")
        self.endIndex = try values.decode(Int.self, forKey: "end_index")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(type, forKey: "type")
        try values.encode(text, forKey: "text")
        try values.encode(fileCitation, forKey: "file_citation")
        try values.encode(startIndex, forKey: "start_index")
        try values.encode(endIndex, forKey: "end_index")
    }
}

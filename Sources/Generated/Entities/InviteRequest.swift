// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct InviteRequest: Codable {
    /// Send an email to this address
    public var email: String
    /// `owner` or `reader`
    public var role: Role
    /// An array of projects to which membership is granted at the same time the org invite is accepted. If omitted, the user will be invited to the default project for compatibility with legacy behavior.
    public var projects: [Project]?

    /// `owner` or `reader`
    public enum Role: String, Codable, CaseIterable {
        case reader
        case owner
    }

    public struct Project: Codable {
        /// Project's public ID
        public var id: String
        /// Project membership role
        public var role: Role

        /// Project membership role
        public enum Role: String, Codable, CaseIterable {
            case member
            case owner
        }

        public init(id: String, role: Role) {
            self.id = id
            self.role = role
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decode(String.self, forKey: "id")
            self.role = try values.decode(Role.self, forKey: "role")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(id, forKey: "id")
            try values.encode(role, forKey: "role")
        }
    }

    public init(email: String, role: Role, projects: [Project]? = nil) {
        self.email = email
        self.role = role
        self.projects = projects
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.email = try values.decode(String.self, forKey: "email")
        self.role = try values.decode(Role.self, forKey: "role")
        self.projects = try values.decodeIfPresent([Project].self, forKey: "projects")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(email, forKey: "email")
        try values.encode(role, forKey: "role")
        try values.encodeIfPresent(projects, forKey: "projects")
    }
}

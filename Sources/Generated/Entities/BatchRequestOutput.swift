// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// The per-line object of the batch output and error files
public struct BatchRequestOutput: Codable {
    public var id: String?
    /// A developer-provided per-request id that will be used to match outputs to inputs.
    public var customID: String?
    public var response: Response?
    /// For requests that failed with a non-HTTP error, this will contain more information on the cause of the failure.
    public var error: Error?

    public struct Response: Codable {
        /// The HTTP status code of the response
        public var statusCode: Int?
        /// An unique identifier for the OpenAI API request. Please include this request ID when contacting support.
        public var requestID: String?
        /// The JSON body of the response
        public var body: [String: AnyJSON]?

        public init(statusCode: Int? = nil, requestID: String? = nil, body: [String: AnyJSON]? = nil) {
            self.statusCode = statusCode
            self.requestID = requestID
            self.body = body
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.statusCode = try values.decodeIfPresent(Int.self, forKey: "status_code")
            self.requestID = try values.decodeIfPresent(String.self, forKey: "request_id")
            self.body = try values.decodeIfPresent([String: AnyJSON].self, forKey: "body")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(statusCode, forKey: "status_code")
            try values.encodeIfPresent(requestID, forKey: "request_id")
            try values.encodeIfPresent(body, forKey: "body")
        }
    }

    /// For requests that failed with a non-HTTP error, this will contain more information on the cause of the failure.
    public struct Error: Codable {
        /// A machine-readable error code.
        public var code: String?
        /// A human-readable error message.
        public var message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.code = try values.decodeIfPresent(String.self, forKey: "code")
            self.message = try values.decodeIfPresent(String.self, forKey: "message")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(code, forKey: "code")
            try values.encodeIfPresent(message, forKey: "message")
        }
    }

    public init(id: String? = nil, customID: String? = nil, response: Response? = nil, error: Error? = nil) {
        self.id = id
        self.customID = customID
        self.response = response
        self.error = error
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.customID = try values.decodeIfPresent(String.self, forKey: "custom_id")
        self.response = try values.decodeIfPresent(Response.self, forKey: "response")
        self.error = try values.decodeIfPresent(Error.self, forKey: "error")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(customID, forKey: "custom_id")
        try values.encodeIfPresent(response, forKey: "response")
        try values.encodeIfPresent(error, forKey: "error")
    }
}

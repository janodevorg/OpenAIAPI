// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// The Upload object can accept byte chunks in the form of Parts.
public struct Upload: Codable {
    /// The Upload unique identifier, which can be referenced in API endpoints.
    public var id: String
    /// The Unix timestamp (in seconds) for when the Upload was created.
    public var createdAt: Int
    /// The name of the file to be uploaded.
    public var filename: String
    /// The intended number of bytes to be uploaded.
    public var bytes: Int
    /// The intended purpose of the file. [Please refer here](/docs/api-reference/files/object#files/object-purpose) for acceptable values.
    public var purpose: String
    /// The status of the Upload.
    public var status: Status
    /// The Unix timestamp (in seconds) for when the Upload was created.
    public var expiresAt: Int
    /// The object type, which is always "upload".
    public var object: Object?
    /// OpenAIFile
    ///
    /// The `File` object represents a document that has been uploaded to OpenAI.
    public var file: OpenAIFile?

    /// The status of the Upload.
    public enum Status: String, Codable, CaseIterable {
        case pending
        case completed
        case cancelled
        case expired
    }

    /// The object type, which is always "upload".
    public enum Object: String, Codable, CaseIterable {
        case upload
    }

    public init(id: String, createdAt: Int, filename: String, bytes: Int, purpose: String, status: Status, expiresAt: Int, object: Object? = nil, file: OpenAIFile? = nil) {
        self.id = id
        self.createdAt = createdAt
        self.filename = filename
        self.bytes = bytes
        self.purpose = purpose
        self.status = status
        self.expiresAt = expiresAt
        self.object = object
        self.file = file
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(String.self, forKey: "id")
        self.createdAt = try values.decode(Int.self, forKey: "created_at")
        self.filename = try values.decode(String.self, forKey: "filename")
        self.bytes = try values.decode(Int.self, forKey: "bytes")
        self.purpose = try values.decode(String.self, forKey: "purpose")
        self.status = try values.decode(Status.self, forKey: "status")
        self.expiresAt = try values.decode(Int.self, forKey: "expires_at")
        self.object = try values.decodeIfPresent(Object.self, forKey: "object")
        self.file = try values.decodeIfPresent(OpenAIFile.self, forKey: "file")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(createdAt, forKey: "created_at")
        try values.encode(filename, forKey: "filename")
        try values.encode(bytes, forKey: "bytes")
        try values.encode(purpose, forKey: "purpose")
        try values.encode(status, forKey: "status")
        try values.encode(expiresAt, forKey: "expires_at")
        try values.encodeIfPresent(object, forKey: "object")
        try values.encodeIfPresent(file, forKey: "file")
    }
}

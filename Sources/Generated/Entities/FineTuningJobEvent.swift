// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Fine-tuning job event object
public struct FineTuningJobEvent: Codable {
    /// The object type, which is always "fine_tuning.job.event".
    public var object: Object
    /// The object identifier.
    public var id: String
    /// The Unix timestamp (in seconds) for when the fine-tuning job was created.
    public var createdAt: Int
    /// The log level of the event.
    public var level: Level
    /// The message of the event.
    public var message: String
    /// The type of event.
    public var type: `Type`?
    /// The data associated with the event.
    public var data: [String: AnyJSON]?

    /// The object type, which is always "fine_tuning.job.event".
    public enum Object: String, Codable, CaseIterable {
        case fineTuningJobEvent = "fine_tuning.job.event"
    }

    /// The log level of the event.
    public enum Level: String, Codable, CaseIterable {
        case info
        case warn
        case error
    }

    /// The type of event.
    public enum `Type`: String, Codable, CaseIterable {
        case message
        case metrics
    }

    public init(object: Object, id: String, createdAt: Int, level: Level, message: String, type: `Type`? = nil, data: [String: AnyJSON]? = nil) {
        self.object = object
        self.id = id
        self.createdAt = createdAt
        self.level = level
        self.message = message
        self.type = type
        self.data = data
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.object = try values.decode(Object.self, forKey: "object")
        self.id = try values.decode(String.self, forKey: "id")
        self.createdAt = try values.decode(Int.self, forKey: "created_at")
        self.level = try values.decode(Level.self, forKey: "level")
        self.message = try values.decode(String.self, forKey: "message")
        self.type = try values.decodeIfPresent(`Type`.self, forKey: "type")
        self.data = try values.decodeIfPresent([String: AnyJSON].self, forKey: "data")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(object, forKey: "object")
        try values.encode(id, forKey: "id")
        try values.encode(createdAt, forKey: "created_at")
        try values.encode(level, forKey: "level")
        try values.encode(message, forKey: "message")
        try values.encodeIfPresent(type, forKey: "type")
        try values.encodeIfPresent(data, forKey: "data")
    }
}

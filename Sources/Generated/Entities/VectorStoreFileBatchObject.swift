// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Vector store file batch
///
/// A batch of files attached to a vector store.
public struct VectorStoreFileBatchObject: Codable {
    /// The identifier, which can be referenced in API endpoints.
    public var id: String
    /// The object type, which is always `vector_store.file_batch`.
    public var object: Object
    /// The Unix timestamp (in seconds) for when the vector store files batch was created.
    public var createdAt: Int
    /// The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.
    public var vectorStoreID: String
    /// The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.
    public var status: Status
    public var fileCounts: FileCounts

    /// The object type, which is always `vector_store.file_batch`.
    public enum Object: String, Codable, CaseIterable {
        case vectorStoreFilesBatch = "vector_store.files_batch"
    }

    /// The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.
    public enum Status: String, Codable, CaseIterable {
        case inProgress = "in_progress"
        case completed
        case cancelled
        case failed
    }

    public struct FileCounts: Codable {
        /// The number of files that are currently being processed.
        public var inProgress: Int
        /// The number of files that have been processed.
        public var completed: Int
        /// The number of files that have failed to process.
        public var failed: Int
        /// The number of files that where cancelled.
        public var cancelled: Int
        /// The total number of files.
        public var total: Int

        public init(inProgress: Int, completed: Int, failed: Int, cancelled: Int, total: Int) {
            self.inProgress = inProgress
            self.completed = completed
            self.failed = failed
            self.cancelled = cancelled
            self.total = total
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.inProgress = try values.decode(Int.self, forKey: "in_progress")
            self.completed = try values.decode(Int.self, forKey: "completed")
            self.failed = try values.decode(Int.self, forKey: "failed")
            self.cancelled = try values.decode(Int.self, forKey: "cancelled")
            self.total = try values.decode(Int.self, forKey: "total")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(inProgress, forKey: "in_progress")
            try values.encode(completed, forKey: "completed")
            try values.encode(failed, forKey: "failed")
            try values.encode(cancelled, forKey: "cancelled")
            try values.encode(total, forKey: "total")
        }
    }

    public init(id: String, object: Object, createdAt: Int, vectorStoreID: String, status: Status, fileCounts: FileCounts) {
        self.id = id
        self.object = object
        self.createdAt = createdAt
        self.vectorStoreID = vectorStoreID
        self.status = status
        self.fileCounts = fileCounts
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(String.self, forKey: "id")
        self.object = try values.decode(Object.self, forKey: "object")
        self.createdAt = try values.decode(Int.self, forKey: "created_at")
        self.vectorStoreID = try values.decode(String.self, forKey: "vector_store_id")
        self.status = try values.decode(Status.self, forKey: "status")
        self.fileCounts = try values.decode(FileCounts.self, forKey: "file_counts")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encode(object, forKey: "object")
        try values.encode(createdAt, forKey: "created_at")
        try values.encode(vectorStoreID, forKey: "vector_store_id")
        try values.encode(status, forKey: "status")
        try values.encode(fileCounts, forKey: "file_counts")
    }
}

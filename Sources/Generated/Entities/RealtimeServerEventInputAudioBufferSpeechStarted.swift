// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Sent by the server when in `server_vad` mode to indicate that speech has been 
/// detected in the audio buffer. This can happen any time audio is added to the 
/// buffer (unless speech is already detected). The client may want to use this 
/// event to interrupt audio playback or provide visual feedback to the user. 
/// 
/// The client should expect to receive a `input_audio_buffer.speech_stopped` event 
/// when speech stops. The `item_id` property is the ID of the user message item 
/// that will be created when speech stops and will also be included in the 
/// `input_audio_buffer.speech_stopped` event (unless the client manually commits 
/// the audio buffer during VAD activation).
public struct RealtimeServerEventInputAudioBufferSpeechStarted: Codable {
    /// The unique ID of the server event.
    public var eventID: String
    /// The event type, must be `input_audio_buffer.speech_started`.
    public var type: `Type`
    /// Milliseconds from the start of all audio written to the buffer during the 
    /// session when speech was first detected. This will correspond to the 
    /// beginning of audio sent to the model, and thus includes the 
    /// `prefix_padding_ms` configured in the Session.
    public var audioStartMs: Int
    /// The ID of the user message item that will be created when speech stops.
    public var itemID: String

    /// The event type, must be `input_audio_buffer.speech_started`.
    public enum `Type`: String, Codable, CaseIterable {
        case inputAudioBufferSpeechStarted = "input_audio_buffer.speech_started"
    }

    public init(eventID: String, type: `Type`, audioStartMs: Int, itemID: String) {
        self.eventID = eventID
        self.type = type
        self.audioStartMs = audioStartMs
        self.itemID = itemID
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.eventID = try values.decode(String.self, forKey: "event_id")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.audioStartMs = try values.decode(Int.self, forKey: "audio_start_ms")
        self.itemID = try values.decode(String.self, forKey: "item_id")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(eventID, forKey: "event_id")
        try values.encode(type, forKey: "type")
        try values.encode(audioStartMs, forKey: "audio_start_ms")
        try values.encode(itemID, forKey: "item_id")
    }
}

// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Returned when a new Item is created during Response generation.
public struct RealtimeServerEventResponseOutputItemAdded: Codable {
    /// The unique ID of the server event.
    public var eventID: String
    /// The event type, must be `response.output_item.added`.
    public var type: `Type`
    /// The ID of the Response to which the item belongs.
    public var responseID: String
    /// The index of the output item in the Response.
    public var outputIndex: Int
    /// The item to add to the conversation.
    public var item: RealtimeConversationItem

    /// The event type, must be `response.output_item.added`.
    public enum `Type`: String, Codable, CaseIterable {
        case responseOutputItemAdded = "response.output_item.added"
    }

    public init(eventID: String, type: `Type`, responseID: String, outputIndex: Int, item: RealtimeConversationItem) {
        self.eventID = eventID
        self.type = type
        self.responseID = responseID
        self.outputIndex = outputIndex
        self.item = item
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.eventID = try values.decode(String.self, forKey: "event_id")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.responseID = try values.decode(String.self, forKey: "response_id")
        self.outputIndex = try values.decode(Int.self, forKey: "output_index")
        self.item = try values.decode(RealtimeConversationItem.self, forKey: "item")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(eventID, forKey: "event_id")
        try values.encode(type, forKey: "type")
        try values.encode(responseID, forKey: "response_id")
        try values.encode(outputIndex, forKey: "output_index")
        try values.encode(item, forKey: "item")
    }
}

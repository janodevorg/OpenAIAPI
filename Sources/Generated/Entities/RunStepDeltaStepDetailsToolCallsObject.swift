// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Tool calls
///
/// Details of the tool call.
public struct RunStepDeltaStepDetailsToolCallsObject: Codable {
    /// Always `tool_calls`.
    public var type: `Type`
    /// An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.
    public var toolCalls: [ToolCall]?

    /// Always `tool_calls`.
    public enum `Type`: String, Codable, CaseIterable {
        case toolCalls = "tool_calls"
    }

    public enum ToolCall: Codable {
        case runStepDeltaStepDetailsToolCallsCodeObject(RunStepDeltaStepDetailsToolCallsCodeObject)
        case runStepDeltaStepDetailsToolCallsFileSearchObject(RunStepDeltaStepDetailsToolCallsFileSearchObject)
        case runStepDeltaStepDetailsToolCallsFunctionObject(RunStepDeltaStepDetailsToolCallsFunctionObject)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(RunStepDeltaStepDetailsToolCallsCodeObject.self) {
                self = .runStepDeltaStepDetailsToolCallsCodeObject(value)
            } else if let value = try? container.decode(RunStepDeltaStepDetailsToolCallsFileSearchObject.self) {
                self = .runStepDeltaStepDetailsToolCallsFileSearchObject(value)
            } else if let value = try? container.decode(RunStepDeltaStepDetailsToolCallsFunctionObject.self) {
                self = .runStepDeltaStepDetailsToolCallsFunctionObject(value)
            } else {
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "Data could not be decoded as any of the expected types (RunStepDeltaStepDetailsToolCallsCodeObject, RunStepDeltaStepDetailsToolCallsFileSearchObject, RunStepDeltaStepDetailsToolCallsFunctionObject)."
                )
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .runStepDeltaStepDetailsToolCallsCodeObject(let value): try container.encode(value)
            case .runStepDeltaStepDetailsToolCallsFileSearchObject(let value): try container.encode(value)
            case .runStepDeltaStepDetailsToolCallsFunctionObject(let value): try container.encode(value)
            }
        }
    }

    public init(type: `Type`, toolCalls: [ToolCall]? = nil) {
        self.type = type
        self.toolCalls = toolCalls
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.toolCalls = try values.decodeIfPresent([ToolCall].self, forKey: "tool_calls")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(type, forKey: "type")
        try values.encodeIfPresent(toolCalls, forKey: "tool_calls")
    }
}

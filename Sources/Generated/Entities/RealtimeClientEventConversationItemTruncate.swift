// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Send this event to truncate a previous assistant messageâ€™s audio. The server 
/// will produce audio faster than realtime, so this event is useful when the user 
/// interrupts to truncate audio that has already been sent to the client but not 
/// yet played. This will synchronize the server's understanding of the audio with 
/// the client's playback.
/// 
/// Truncating audio will delete the server-side text transcript to ensure there 
/// is not text in the context that hasn't been heard by the user.
/// 
/// If successful, the server will respond with a `conversation.item.truncated` 
/// event.
public struct RealtimeClientEventConversationItemTruncate: Codable {
    /// Optional client-generated ID used to identify this event.
    public var eventID: String?
    /// The event type, must be `conversation.item.truncate`.
    public var type: `Type`
    /// The ID of the assistant message item to truncate. Only assistant message 
    /// items can be truncated.
    public var itemID: String
    /// The index of the content part to truncate. Set this to 0.
    public var contentIndex: Int
    /// Inclusive duration up to which audio is truncated, in milliseconds. If 
    /// the audio_end_ms is greater than the actual audio duration, the server 
    /// will respond with an error.
    public var audioEndMs: Int

    /// The event type, must be `conversation.item.truncate`.
    public enum `Type`: String, Codable, CaseIterable {
        case conversationItemTruncate = "conversation.item.truncate"
    }

    public init(eventID: String? = nil, type: `Type`, itemID: String, contentIndex: Int, audioEndMs: Int) {
        self.eventID = eventID
        self.type = type
        self.itemID = itemID
        self.contentIndex = contentIndex
        self.audioEndMs = audioEndMs
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.eventID = try values.decodeIfPresent(String.self, forKey: "event_id")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.itemID = try values.decode(String.self, forKey: "item_id")
        self.contentIndex = try values.decode(Int.self, forKey: "content_index")
        self.audioEndMs = try values.decode(Int.self, forKey: "audio_end_ms")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(eventID, forKey: "event_id")
        try values.encode(type, forKey: "type")
        try values.encode(itemID, forKey: "item_id")
        try values.encode(contentIndex, forKey: "content_index")
        try values.encode(audioEndMs, forKey: "audio_end_ms")
    }
}

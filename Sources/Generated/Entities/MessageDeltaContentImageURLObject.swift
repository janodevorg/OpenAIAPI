// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Image URL
///
/// References an image URL in the content of a message.
public struct MessageDeltaContentImageURLObject: Codable {
    /// The index of the content part in the message.
    public var index: Int
    /// Always `image_url`.
    public var type: `Type`
    public var imageURL: ImageURL?

    /// Always `image_url`.
    public enum `Type`: String, Codable, CaseIterable {
        case imageURL = "image_url"
    }

    public struct ImageURL: Codable {
        /// The URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.
        public var url: String?
        /// Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`.
        public var detail: Detail?

        /// Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`.
        public enum Detail: String, Codable, CaseIterable {
            case auto
            case low
            case high
        }

        public init(url: String? = nil, detail: Detail? = nil) {
            self.url = url
            self.detail = detail
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.url = try values.decodeIfPresent(String.self, forKey: "url")
            self.detail = try values.decodeIfPresent(Detail.self, forKey: "detail")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(url, forKey: "url")
            try values.encodeIfPresent(detail, forKey: "detail")
        }
    }

    public init(index: Int, type: `Type`, imageURL: ImageURL? = nil) {
        self.index = index
        self.type = type
        self.imageURL = imageURL
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.index = try values.decode(Int.self, forKey: "index")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.imageURL = try values.decodeIfPresent(ImageURL.self, forKey: "image_url")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(index, forKey: "index")
        try values.encode(type, forKey: "type")
        try values.encodeIfPresent(imageURL, forKey: "image_url")
    }
}

// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Code interpreter image output
public struct RunStepDeltaStepDetailsToolCallsCodeOutputImageObject: Codable {
    /// The index of the output in the outputs array.
    public var index: Int
    /// Always `image`.
    public var type: `Type`
    public var image: Image?

    /// Always `image`.
    public enum `Type`: String, Codable, CaseIterable {
        case image
    }

    public struct Image: Codable {
        /// The [file](/docs/api-reference/files) ID of the image.
        public var fileID: String?

        public init(fileID: String? = nil) {
            self.fileID = fileID
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.fileID = try values.decodeIfPresent(String.self, forKey: "file_id")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(fileID, forKey: "file_id")
        }
    }

    public init(index: Int, type: `Type`, image: Image? = nil) {
        self.index = index
        self.type = type
        self.image = image
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.index = try values.decode(Int.self, forKey: "index")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.image = try values.decodeIfPresent(Image.self, forKey: "image")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(index, forKey: "index")
        try values.encode(type, forKey: "type")
        try values.encodeIfPresent(image, forKey: "image")
    }
}

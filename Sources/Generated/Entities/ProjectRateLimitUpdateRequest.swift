// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct ProjectRateLimitUpdateRequest: Codable {
    /// The maximum requests per minute.
    public var maxRequestsPer1Minute: Int?
    /// The maximum tokens per minute.
    public var maxTokensPer1Minute: Int?
    /// The maximum images per minute. Only relevant for certain models.
    public var maxImagesPer1Minute: Int?
    /// The maximum audio megabytes per minute. Only relevant for certain models.
    public var maxAudioMegabytesPer1Minute: Int?
    /// The maximum requests per day. Only relevant for certain models.
    public var maxRequestsPer1Day: Int?
    /// The maximum batch input tokens per day. Only relevant for certain models.
    public var batch1DayMaxInputTokens: Int?

    public init(maxRequestsPer1Minute: Int? = nil, maxTokensPer1Minute: Int? = nil, maxImagesPer1Minute: Int? = nil, maxAudioMegabytesPer1Minute: Int? = nil, maxRequestsPer1Day: Int? = nil, batch1DayMaxInputTokens: Int? = nil) {
        self.maxRequestsPer1Minute = maxRequestsPer1Minute
        self.maxTokensPer1Minute = maxTokensPer1Minute
        self.maxImagesPer1Minute = maxImagesPer1Minute
        self.maxAudioMegabytesPer1Minute = maxAudioMegabytesPer1Minute
        self.maxRequestsPer1Day = maxRequestsPer1Day
        self.batch1DayMaxInputTokens = batch1DayMaxInputTokens
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.maxRequestsPer1Minute = try values.decodeIfPresent(Int.self, forKey: "max_requests_per_1_minute")
        self.maxTokensPer1Minute = try values.decodeIfPresent(Int.self, forKey: "max_tokens_per_1_minute")
        self.maxImagesPer1Minute = try values.decodeIfPresent(Int.self, forKey: "max_images_per_1_minute")
        self.maxAudioMegabytesPer1Minute = try values.decodeIfPresent(Int.self, forKey: "max_audio_megabytes_per_1_minute")
        self.maxRequestsPer1Day = try values.decodeIfPresent(Int.self, forKey: "max_requests_per_1_day")
        self.batch1DayMaxInputTokens = try values.decodeIfPresent(Int.self, forKey: "batch_1_day_max_input_tokens")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(maxRequestsPer1Minute, forKey: "max_requests_per_1_minute")
        try values.encodeIfPresent(maxTokensPer1Minute, forKey: "max_tokens_per_1_minute")
        try values.encodeIfPresent(maxImagesPer1Minute, forKey: "max_images_per_1_minute")
        try values.encodeIfPresent(maxAudioMegabytesPer1Minute, forKey: "max_audio_megabytes_per_1_minute")
        try values.encodeIfPresent(maxRequestsPer1Day, forKey: "max_requests_per_1_day")
        try values.encodeIfPresent(batch1DayMaxInputTokens, forKey: "batch_1_day_max_input_tokens")
    }
}

// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Audio content part
///
/// Learn about [audio inputs](/docs/guides/audio).
public struct ChatCompletionRequestMessageContentPartAudio: Codable {
    /// The type of the content part. Always `input_audio`.
    public var type: `Type`
    public var inputAudio: InputAudio

    /// The type of the content part. Always `input_audio`.
    public enum `Type`: String, Codable, CaseIterable {
        case inputAudio = "input_audio"
    }

    public struct InputAudio: Codable {
        /// Base64 encoded audio data.
        public var data: String
        /// The format of the encoded audio data. Currently supports "wav" and "mp3".
        public var format: Format

        /// The format of the encoded audio data. Currently supports "wav" and "mp3".
        public enum Format: String, Codable, CaseIterable {
            case wav
            case mp3
        }

        public init(data: String, format: Format) {
            self.data = data
            self.format = format
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.data = try values.decode(String.self, forKey: "data")
            self.format = try values.decode(Format.self, forKey: "format")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(data, forKey: "data")
            try values.encode(format, forKey: "format")
        }
    }

    public init(type: `Type`, inputAudio: InputAudio) {
        self.type = type
        self.inputAudio = inputAudio
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.inputAudio = try values.decode(InputAudio.self, forKey: "input_audio")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(type, forKey: "type")
        try values.encode(inputAudio, forKey: "input_audio")
    }
}

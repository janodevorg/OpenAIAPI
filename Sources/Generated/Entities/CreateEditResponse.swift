// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CreateEditResponse: Codable {
    public var object: String
    public var created: Int
    public var choices: [Choice]
    public var usage: Usage

    public struct Choice: Codable {
        public var text: String?
        public var index: Int?
        public var logprobs: Logprobs?
        public var finishReason: String?

        public struct Logprobs: Codable {
            public var tokens: [String]?
            public var tokenLogprobs: [Double]?
            public var topLogprobs: [[String: AnyJSON]]?
            public var textOffset: [Int]?

            public init(tokens: [String]? = nil, tokenLogprobs: [Double]? = nil, topLogprobs: [[String: AnyJSON]]? = nil, textOffset: [Int]? = nil) {
                self.tokens = tokens
                self.tokenLogprobs = tokenLogprobs
                self.topLogprobs = topLogprobs
                self.textOffset = textOffset
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.tokens = try values.decodeIfPresent([String].self, forKey: "tokens")
                self.tokenLogprobs = try values.decodeIfPresent([Double].self, forKey: "token_logprobs")
                self.topLogprobs = try values.decodeIfPresent([[String: AnyJSON]].self, forKey: "top_logprobs")
                self.textOffset = try values.decodeIfPresent([Int].self, forKey: "text_offset")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(tokens, forKey: "tokens")
                try values.encodeIfPresent(tokenLogprobs, forKey: "token_logprobs")
                try values.encodeIfPresent(topLogprobs, forKey: "top_logprobs")
                try values.encodeIfPresent(textOffset, forKey: "text_offset")
            }
        }

        public init(text: String? = nil, index: Int? = nil, logprobs: Logprobs? = nil, finishReason: String? = nil) {
            self.text = text
            self.index = index
            self.logprobs = logprobs
            self.finishReason = finishReason
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.text = try values.decodeIfPresent(String.self, forKey: "text")
            self.index = try values.decodeIfPresent(Int.self, forKey: "index")
            self.logprobs = try values.decodeIfPresent(Logprobs.self, forKey: "logprobs")
            self.finishReason = try values.decodeIfPresent(String.self, forKey: "finish_reason")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(text, forKey: "text")
            try values.encodeIfPresent(index, forKey: "index")
            try values.encodeIfPresent(logprobs, forKey: "logprobs")
            try values.encodeIfPresent(finishReason, forKey: "finish_reason")
        }
    }

    public struct Usage: Codable {
        public var promptTokens: Int
        public var completionTokens: Int
        public var totalTokens: Int

        public init(promptTokens: Int, completionTokens: Int, totalTokens: Int) {
            self.promptTokens = promptTokens
            self.completionTokens = completionTokens
            self.totalTokens = totalTokens
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.promptTokens = try values.decode(Int.self, forKey: "prompt_tokens")
            self.completionTokens = try values.decode(Int.self, forKey: "completion_tokens")
            self.totalTokens = try values.decode(Int.self, forKey: "total_tokens")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(promptTokens, forKey: "prompt_tokens")
            try values.encode(completionTokens, forKey: "completion_tokens")
            try values.encode(totalTokens, forKey: "total_tokens")
        }
    }

    public init(object: String, created: Int, choices: [Choice], usage: Usage) {
        self.object = object
        self.created = created
        self.choices = choices
        self.usage = usage
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.object = try values.decode(String.self, forKey: "object")
        self.created = try values.decode(Int.self, forKey: "created")
        self.choices = try values.decode([Choice].self, forKey: "choices")
        self.usage = try values.decode(Usage.self, forKey: "usage")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(object, forKey: "object")
        try values.encode(created, forKey: "created")
        try values.encode(choices, forKey: "choices")
        try values.encode(usage, forKey: "usage")
    }
}

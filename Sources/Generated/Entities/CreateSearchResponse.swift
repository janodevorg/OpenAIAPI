// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CreateSearchResponse: Codable {
    public var object: String?
    public var model: String?
    public var data: [Datum]?

    public struct Datum: Codable {
        public var object: String?
        public var document: Int?
        public var score: Double?

        public init(object: String? = nil, document: Int? = nil, score: Double? = nil) {
            self.object = object
            self.document = document
            self.score = score
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.object = try values.decodeIfPresent(String.self, forKey: "object")
            self.document = try values.decodeIfPresent(Int.self, forKey: "document")
            self.score = try values.decodeIfPresent(Double.self, forKey: "score")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(object, forKey: "object")
            try values.encodeIfPresent(document, forKey: "document")
            try values.encodeIfPresent(score, forKey: "score")
        }
    }

    public init(object: String? = nil, model: String? = nil, data: [Datum]? = nil) {
        self.object = object
        self.model = model
        self.data = data
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.object = try values.decodeIfPresent(String.self, forKey: "object")
        self.model = try values.decodeIfPresent(String.self, forKey: "model")
        self.data = try values.decodeIfPresent([Datum].self, forKey: "data")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(object, forKey: "object")
        try values.encodeIfPresent(model, forKey: "model")
        try values.encodeIfPresent(data, forKey: "data")
    }
}

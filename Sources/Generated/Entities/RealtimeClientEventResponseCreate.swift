// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// This event instructs the server to create a Response, which means triggering 
/// model inference. When in Server VAD mode, the server will create Responses 
/// automatically.
/// 
/// A Response will include at least one Item, and may have two, in which case 
/// the second will be a function call. These Items will be appended to the 
/// conversation history.
/// 
/// The server will respond with a `response.created` event, events for Items 
/// and content created, and finally a `response.done` event to indicate the 
/// Response is complete.
/// 
/// The `response.create` event includes inference configuration like 
/// `instructions`, and `temperature`. These fields will override the Session's 
/// configuration for this Response only.
public struct RealtimeClientEventResponseCreate: Codable {
    /// Optional client-generated ID used to identify this event.
    public var eventID: String?
    /// The event type, must be `response.create`.
    public var type: `Type`
    /// Create a new Realtime response with these parameters
    public var response: RealtimeResponseCreateParams?

    /// The event type, must be `response.create`.
    public enum `Type`: String, Codable, CaseIterable {
        case responseCreate = "response.create"
    }

    public init(eventID: String? = nil, type: `Type`, response: RealtimeResponseCreateParams? = nil) {
        self.eventID = eventID
        self.type = type
        self.response = response
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.eventID = try values.decodeIfPresent(String.self, forKey: "event_id")
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.response = try values.decodeIfPresent(RealtimeResponseCreateParams.self, forKey: "response")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(eventID, forKey: "event_id")
        try values.encode(type, forKey: "type")
        try values.encodeIfPresent(response, forKey: "response")
    }
}

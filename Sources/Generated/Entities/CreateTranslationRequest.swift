// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CreateTranslationRequest: Codable {
    /// The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
    public var file: Data
    /// ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.
    ///
    /// Example: "whisper-1"
    public var model: Model
    /// An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting) should be in English.
    public var prompt: String?
    /// The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.
    public var responseFormat: AudioResponseFormat?
    /// The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
    public var temperature: Double?

    /// ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.
    ///
    /// Example: "whisper-1"
    public struct Model: Codable {
        public var string: String?
        public var object: Object?

        public enum Object: String, Codable, CaseIterable {
            case whisper1 = "whisper-1"
        }

        public init(string: String? = nil, object: Object? = nil) {
            self.string = string
            self.object = object
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.object = try? container.decode(Object.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = object { try container.encode(value) }
        }
    }

    public init(file: Data, model: Model, prompt: String? = nil, responseFormat: AudioResponseFormat? = nil, temperature: Double? = nil) {
        self.file = file
        self.model = model
        self.prompt = prompt
        self.responseFormat = responseFormat
        self.temperature = temperature
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.file = try values.decode(Data.self, forKey: "file")
        self.model = try values.decode(Model.self, forKey: "model")
        self.prompt = try values.decodeIfPresent(String.self, forKey: "prompt")
        self.responseFormat = try values.decodeIfPresent(AudioResponseFormat.self, forKey: "response_format")
        self.temperature = try values.decodeIfPresent(Double.self, forKey: "temperature")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(file, forKey: "file")
        try values.encode(model, forKey: "model")
        try values.encodeIfPresent(prompt, forKey: "prompt")
        try values.encodeIfPresent(responseFormat, forKey: "response_format")
        try values.encodeIfPresent(temperature, forKey: "temperature")
    }
}

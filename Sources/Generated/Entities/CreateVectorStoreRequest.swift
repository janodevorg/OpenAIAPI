// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CreateVectorStoreRequest: Codable {
    /// A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.
    public var fileIDs: [String]?
    /// The name of the vector store.
    public var name: String?
    /// Vector store expiration policy
    ///
    /// The expiration policy for a vector store.
    public var expiresAfter: VectorStoreExpirationAfter?
    /// The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty.
    public var chunkingStrategy: ChunkingStrategy?
    /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
    public var metadata: [String: AnyJSON]?

    /// The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty.
    public enum ChunkingStrategy: Codable {
        case autoChunkingStrategyRequestParam(AutoChunkingStrategyRequestParam)
        case staticChunkingStrategyRequestParam(StaticChunkingStrategyRequestParam)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AutoChunkingStrategyRequestParam.self) {
                self = .autoChunkingStrategyRequestParam(value)
            } else if let value = try? container.decode(StaticChunkingStrategyRequestParam.self) {
                self = .staticChunkingStrategyRequestParam(value)
            } else {
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "Data could not be decoded as any of the expected types (AutoChunkingStrategyRequestParam, StaticChunkingStrategyRequestParam)."
                )
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .autoChunkingStrategyRequestParam(let value): try container.encode(value)
            case .staticChunkingStrategyRequestParam(let value): try container.encode(value)
            }
        }
    }

    public init(fileIDs: [String]? = nil, name: String? = nil, expiresAfter: VectorStoreExpirationAfter? = nil, chunkingStrategy: ChunkingStrategy? = nil, metadata: [String: AnyJSON]? = nil) {
        self.fileIDs = fileIDs
        self.name = name
        self.expiresAfter = expiresAfter
        self.chunkingStrategy = chunkingStrategy
        self.metadata = metadata
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.fileIDs = try values.decodeIfPresent([String].self, forKey: "file_ids")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.expiresAfter = try values.decodeIfPresent(VectorStoreExpirationAfter.self, forKey: "expires_after")
        self.chunkingStrategy = try values.decodeIfPresent(ChunkingStrategy.self, forKey: "chunking_strategy")
        self.metadata = try values.decodeIfPresent([String: AnyJSON].self, forKey: "metadata")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(fileIDs, forKey: "file_ids")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(expiresAfter, forKey: "expires_after")
        try values.encodeIfPresent(chunkingStrategy, forKey: "chunking_strategy")
        try values.encodeIfPresent(metadata, forKey: "metadata")
    }
}

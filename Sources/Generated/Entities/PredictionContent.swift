// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Static Content
///
/// Static predicted output content, such as the content of a text file that is
/// being regenerated.
public struct PredictionContent: Codable {
    /// The type of the predicted content you want to provide. This type is
    /// currently always `content`.
    public var type: `Type`
    /// The content that should be matched when generating a model response.
    /// If generated tokens would match this content, the entire model response
    /// can be returned much more quickly.
    public var content: Content

    /// The type of the predicted content you want to provide. This type is
    /// currently always `content`.
    public enum `Type`: String, Codable, CaseIterable {
        case content
    }

    /// The content that should be matched when generating a model response.
    /// If generated tokens would match this content, the entire model response
    /// can be returned much more quickly.
    public enum Content: Codable {
        case string(String)
        case chatCompletionRequestMessageContentPartTexts([ChatCompletionRequestMessageContentPartText])

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(String.self) {
                self = .string(value)
            } else if let value = try? container.decode([ChatCompletionRequestMessageContentPartText].self) {
                self = .chatCompletionRequestMessageContentPartTexts(value)
            } else {
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "Data could not be decoded as any of the expected types (String, [ChatCompletionRequestMessageContentPartText])."
                )
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .string(let value): try container.encode(value)
            case .chatCompletionRequestMessageContentPartTexts(let value): try container.encode(value)
            }
        }
    }

    public init(type: `Type`, content: Content) {
        self.type = type
        self.content = content
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.type = try values.decode(`Type`.self, forKey: "type")
        self.content = try values.decode(Content.self, forKey: "content")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(type, forKey: "type")
        try values.encode(content, forKey: "content")
    }
}

// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.
/// 
/// Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).
/// 
/// Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
/// 
/// **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
public enum AssistantsAPIResponseFormatOption: Codable {
    case object(Object)
    case responseFormatText(ResponseFormatText)
    case responseFormatJSONObject(ResponseFormatJSONObject)
    case responseFormatJSONSchema(ResponseFormatJSONSchema)

    /// `auto` is the default value
    public enum Object: String, Codable, CaseIterable {
        case auto
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(Object.self) {
            self = .object(value)
        } else if let value = try? container.decode(ResponseFormatText.self) {
            self = .responseFormatText(value)
        } else if let value = try? container.decode(ResponseFormatJSONObject.self) {
            self = .responseFormatJSONObject(value)
        } else if let value = try? container.decode(ResponseFormatJSONSchema.self) {
            self = .responseFormatJSONSchema(value)
        } else {
            throw DecodingError.dataCorruptedError(
                in: container,
                debugDescription: "Data could not be decoded as any of the expected types (Object, ResponseFormatText, ResponseFormatJSONObject, ResponseFormatJSONSchema)."
            )
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .object(let value): try container.encode(value)
        case .responseFormatText(let value): try container.encode(value)
        case .responseFormatJSONObject(let value): try container.encode(value)
        case .responseFormatJSONSchema(let value): try container.encode(value)
        }
    }
}
